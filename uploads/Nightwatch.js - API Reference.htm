<!DOCTYPE html>
<!-- saved from url=(0039)http://nightwatchjs.org/api#expect-text -->
<html data-uri="/api"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <title>Nightwatch.js - API Reference</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Browser automated testing done easy. Write efficient and straightforward Javascript End-to-End tests in Node.js which run against a Selenium server.">
    <link href="./Nightwatch.js - API Reference_files/css" rel="stylesheet" type="text/css">
    <link rel="canonical" href="http://nightwatchjs.org/">
    
    <meta property="og:title" content="Nightwatch.js">
    <meta property="og:image" content="http://nightwatchjs.org/img/logo-nightwatch.png">

    <!-- Bootstrap -->
    <link rel="stylesheet" href="./Nightwatch.js - API Reference_files/bootstrap.min.css">
    <link href="./Nightwatch.js - API Reference_files/main.css" rel="stylesheet">
    <link href="./Nightwatch.js - API Reference_files/sidebar.css" rel="stylesheet">

    <script async="" src="./Nightwatch.js - API Reference_files/analytics.js"></script><script id="twitter-wjs" src="./Nightwatch.js - API Reference_files/widgets.js"></script><script>(function(p,h) {h.setAttribute('data-uri',(p!='/'?'/'+p.split('/')[1]:p));})(location.pathname,document.documentElement);</script>
    <noscript>&lt;style&gt;#index-container {display: block}&lt;/style&gt;</noscript>
    <link href="./Nightwatch.js - API Reference_files/prismjs.css" rel="stylesheet">
  <script type="text/javascript" charset="utf-8" async="" src="./Nightwatch.js - API Reference_files/button.552a34de542f2646ca0c08da6760c341.js"></script></head>
  <body data-pinterest-extension-installed="cr1.39.2">
    <!-- Fixed navbar -->
    <div class="navbar navbar-default navbar-fixed-top navbar-right" role="navigation">
      <div class="container">
        <div class="navbar-header">
          <div class="logo-small"><a href="http://nightwatchjs.org/"><img src="./Nightwatch.js - API Reference_files/logo-nightwatch.png" alt="Index"> v0.9.5</a></div>
          <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </button>
        </div>
        <div class="navbar-collapse collapse">
          <ul class="nav navbar-nav navbar-right">
            <li><a href="http://nightwatchjs.org/">Home</a></li>
            <li><a href="http://nightwatchjs.org/guide">Developer Guide</a></li>
            <li class="active"><a href="http://nightwatchjs.org/api">API Reference</a></li>
            <li><a href="http://nightwatchjs.org/blog">Blog</a></li>
            <li><a href="http://nightwatchjs.org/contact">Contact</a></li>
          </ul>
        </div><!--/.nav-collapse -->
      </div>
    </div>
    <noscript>Please enable javascript to use this site!</noscript>
  <section id="index-container" data-page-uri="/">
    <div class="jumbotron">
      <div class="container">
        <div class="row">
          <div class="col-lg-7 col-md-7">
            <h1><img src="./Nightwatch.js - API Reference_files/logo-nightwatch.png" alt="Nightwatch.js"><span>Nightwatch<em>.js</em></span></h1>
            <p>Browser automated testing done easy.</p>
          </div>
          <div class="col-lg-5 col-md-5"></div>
        </div>
      </div>
    </div>

    <div class="container download">
      <div class="container">
        <div class="row intro">
          Write End-to-End tests in Node.js quickly and effortlessly that run against a Selenium server.
        </div>
        <div class="row">
          <div class="col-lg-6 col-md-6 col-sm-4 download">
            <a href="https://github.com/nightwatchjs/nightwatch/archive/v0.9.5.zip" class="btn btn-primary btn-lg"><span class="glyphicon glyphicon-download-alt"></span> Download <span class="version">(v0.9.5)</span></a>
          </div>
          <div class="col-lg-6 col-md-6 col-sm-4">
            <a href="https://github.com/nightwatchjs/nightwatch" target="_blank" class="btn btn-primary btn-lg btn-github">View on GitHub</a>
          </div>
        </div>
        <div class="social">
          <ul>
            <li><iframe id="twitter-widget-1" scrolling="no" frameborder="0" allowtransparency="true" class="twitter-share-button twitter-share-button-rendered twitter-tweet-button" title="Twitter Tweet Button" src="./Nightwatch.js - API Reference_files/tweet_button.b41e99df00581dc95d7fdd63f3283511.en.html" style="position: static; visibility: visible; width: 61px; height: 20px;"></iframe></li>
            <li>
              <iframe src="./Nightwatch.js - API Reference_files/github-btn.html" allowtransparency="true" frameborder="0" scrolling="0" width="110" height="20"></iframe>
            </li>
          </ul>
        </div>
      </div>
    </div>


    <div class="container" style="max-width: 780px">
      <div class="row">

        <div class="col-sm-8 col-lg-10" style="margin: 0 auto; float: none; text-align: center;">
          <h2>Browser Automation</h2>
          <p style="color: #777; font-weight: 300; font-size:16px">
            <strong>Nightwatch.js</strong> is an easy to use <em>Node.js</em> based End-to-End (E2E) testing solution for browser based apps and websites.
            It uses the powerful <em><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol" target="_blank">Selenium WebDriver API</a></em> to perform commands and assertions on DOM elements.
          </p>
        </div><!--/span-->
      </div>

      <div class="row" style="max-width: 580px; text-align: center; margin:0 auto">
        <h2 style="border-bottom: 1px solid #ccc; margin-bottom: 20px; padding-bottom: 10px;">Main Features</h2>
      </div>

      <div class="row">

      </div>

      <div class="row">
        <div class="col-md-5 col-lg-5 col-sm-5 col-xs-5" style="text-align: right;">
          <ul class="features">
            <li>
              <h3>Clean syntax</h3>
              <p>
                Simple but powerful syntax which enables you to write tests very quickly, using only Javascript (Node.js) and CSS or Xpath selectors.
              </p>
            </li>

            <li class="selenium">
              <h3>Selenium server</h3>
              <p>
                Controls the Selenium standalone server automatically in a separate child process; can be disabled if Selenium runs on another host.
              </p>
            </li>

            <li class="selectors">
              <h3>CSS &amp; Xpath support</h3>
              <p>
                Either CSS or Xpath selectors can be used to locate and verify elements on the page or execute commands.
              </p>
            </li>

            <li class="plugins">
              <h3>Easy to extend</h3>
              <p>
                Flexible command and assertion framework which makes it easy to extend to implement your application specific commands and assertions.
              </p>
            </li>

          </ul>
        </div>
        <div class="col-md-2 col-lg-2 col-sm-2 col-xs-2" style="text-align: center;">
          <div class="feature-icon syntax"></div>
          <div class="vertical-line"></div>
          <div class="feature-icon testrunner"></div>
          <div class="vertical-line"></div>
          <div class="feature-icon selenium"></div>
          <div class="vertical-line"></div>
          <div class="feature-icon cloudtesting"></div>
          <div class="vertical-line"></div>
          <div class="feature-icon selectors"></div>
          <div class="vertical-line"></div>
          <div class="feature-icon junit"></div>
          <div class="vertical-line"></div>

          <div class="feature-icon plugin"></div>
        </div>

        <div class="col-md-5 col-lg-5 col-sm-5 col-xs-5" style="text-align: left;">
          <ul class="features">
          <li class="testrunner">
            <h3>Built-in test runner</h3>
            <p>
              Built-in command-line test runner which can run the tests either sequentially or in parallel, together, by group, tags or single. <a href="http://gruntjs.com/" target="_blank">Grunt</a> support is built-in.
            </p>
          </li>

          <li class="cloudtesting">
            <h3>Cloud services support</h3>
            <p>
              Works with cloud testing providers, such as <a href="https://saucelabs.com/" target="_blank">SauceLabs</a> and <a href="http://www.browserstack.com/" target="_blank">BrowserStack</a>.
            </p>
          </li>

          <li class="junit">
            <h3>Continous integration support</h3>
            <p>
              JUnit XML reporting is built-in so you can integrate your tests in your build process with systems such as Teamcity, Jenkins, Hudson etc.
            </p>
          </li>

          </ul>
        </div><!--/span-->
      </div><!--/row-->
  </div><!--/.container-->

  <div class="container example">
    <div class="container">
      <div class="row" style="padding-left: 50px;">
        <h2>Demo Test</h2>
        <p>The test below navigates to google.com and searches for <i>"rembrandt van rijn"</i>, then verifies if the term first result is the Wikipedia page of Rembrandt.</p>
      </div>

      <div class="row">
        <div class="col-lg-5">
          <div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string">'Demo test Google'</span> <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>client<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    client
      <span class="token punctuation">.</span><span class="token function">url<span class="token punctuation">(</span></span><span class="token string">'http://www.google.com'</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">waitForElementVisible<span class="token punctuation">(</span></span><span class="token string">'body'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">title<span class="token punctuation">(</span></span><span class="token string">'Google'</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">visible<span class="token punctuation">(</span></span><span class="token string">'input[type=text]'</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">setValue<span class="token punctuation">(</span></span><span class="token string">'input[type=text]'</span><span class="token punctuation">,</span> <span class="token string">'rembrandt van rijn'</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">waitForElementVisible<span class="token punctuation">(</span></span><span class="token string">'button[name=btnG]'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">click<span class="token punctuation">(</span></span><span class="token string">'button[name=btnG]'</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">pause<span class="token punctuation">(</span></span><span class="token number">1000</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">containsText<span class="token punctuation">(</span></span><span class="token string">'ol#rso li:first-child'</span><span class="token punctuation">,</span>
        <span class="token string">'Rembrandt - Wikipedia'</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">end<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
          </div>
        </div>

      <div class="col-lg-7 sampleoutput">
          <div class="screenshot"></div>
      </div>

      </div>
    </div>
  </div>

  <div class="container twitter">
    <div class="row" style="max-width: 780px; text-align: center; margin: 0 auto">
      <h2>Stay Updated</h2>
      <p>
        Follow <a href="https://twitter.com/nightwatchjs" target="_blank">@nightwatchjs</a> on Twitter to receive updates or to get in touch.
      </p>
      <p style="margin-top: 20px">
        <a href="https://twitter.com/nightwatchjs" target="_blank" class="btn btn-primary btn-lg btn-twitter">Follow on Twitter</a>
      </p>
    </div>
  </div>

  </section>
  <!-- ****************************************************
   * Developer Guide
   **************************************************** -->
  <section id="guide-container" data-page-uri="/guide" class="secondary">
    <div class="jumbotron">
      <div class="container">
        <h1>Developer Guide</h1>
      </div>
    </div>

    <div class="container bs-docs-container">
      <div class="row">
      <div class="col-md-3">
        <div class="bs-sidebar hidden-print" role="complementary" data-spy="affix" data-offset-top="60" data-offset-bottom="100">
          <ul class="nav bs-sidenav">
            <li>
              <a href="http://nightwatchjs.org/api#guide">Overview</a>
              <ul class="nav">
                <li><a href="http://nightwatchjs.org/api#what-is-nightwatch-">What is Nightwatch?</a></li>
                <li><a href="http://nightwatchjs.org/api#overview-of-webdriver">Overview of WebDriver</a></li>
                <li><a href="http://nightwatchjs.org/api#theory-of-operation">Theory of Operation</a></li>
              </ul>
            </li>

            <li>
              <a href="http://nightwatchjs.org/api#installation">Getting Started</a>
              <ul class="nav">
                <li><a href="http://nightwatchjs.org/api#install-node-js">Install Node.js</a></li>
                <li><a href="http://nightwatchjs.org/api#install-nightwatch">Install Nightwatch</a></li>
                <li><a href="http://nightwatchjs.org/api#running-the-selenium-server">Selenium Server</a></li>
              </ul>
            </li>

            <li>
              <a href="http://nightwatchjs.org/api#settings-file">Configuration</a>
              <ul class="nav">
                <li><a href="http://nightwatchjs.org/api#basic-settings">Basic Settings</a></li>
                <li><a href="http://nightwatchjs.org/api#selenium-settings">Selenium Settings</a></li>
                <li><a href="http://nightwatchjs.org/api#test-settings">Test Settings</a></li>
              </ul>
            </li>

            <li>
              <a href="http://nightwatchjs.org/api#usage">Using Nightwatch</a>
              <ul class="nav">
                <li><a href="http://nightwatchjs.org/api#writing-tests">Writing Tests</a></li>
                <li><a href="http://nightwatchjs.org/api#using-xpath-selectors">Using Xpath</a></li>
                <li><a href="http://nightwatchjs.org/api#bdd-expect-assertions">BDD Expect Assertions</a></li>
                <li><a href="http://nightwatchjs.org/api#using-before-each-and-after-each-hooks">Test Hooks</a></li>
                <li><a href="http://nightwatchjs.org/api#asynchronous-before-each-and-after-each-">Asynchronous Test Hooks</a></li>
                <li><a href="http://nightwatchjs.org/api#external-globals">External Globals</a></li>
              </ul>
            </li>

            <li>
              <a href="http://nightwatchjs.org/api#running-tests">Running Tests</a>
              <ul class="nav">
                <li><a href="http://nightwatchjs.org/api#test-runner">Nightwatch Runner</a></li>
                <li><a href="http://nightwatchjs.org/api#command-line-options">Command-line Options</a></li>
                <li><a href="http://nightwatchjs.org/api#test-groups">Test Groups</a></li>
                <li><a href="http://nightwatchjs.org/api#test-tags">Test Tags</a></li>
                <li><a href="http://nightwatchjs.org/api#disabling-tests">Disabling Tests</a></li>
                <li><a href="http://nightwatchjs.org/api#parallel-running">Parallel Running</a></li>
                <li><a href="http://nightwatchjs.org/api#using-grunt">Using Grunt</a></li>
                <li><a href="http://nightwatchjs.org/api#using-mocha">Using Mocha</a></li>
              </ul>
            </li>

            <li>
              <a href="http://nightwatchjs.org/api#page-objects">Working with Page Objects</a>
              <ul class="nav">
                <li><a href="http://nightwatchjs.org/api#using-page-objects">Using Page Objects</a></li>
                <li><a href="http://nightwatchjs.org/api#defining-elements">Defining Elements</a></li>
                <li><a href="http://nightwatchjs.org/api#defining-sections">Defining Sections</a></li>
                <li><a href="http://nightwatchjs.org/api#writing-commands">Writing Commands</a></li>
              </ul>
            </li>

            <li>
              <a href="http://nightwatchjs.org/api#extending">Extending Nightwatch</a>
              <ul class="nav">
                <li><a href="http://nightwatchjs.org/api#writing-custom-commands">Custom commands</a></li>
                <li><a href="http://nightwatchjs.org/api#writing-custom-assertions">Custom assertions</a></li>
                <li><a href="http://nightwatchjs.org/api#custom-reporter">Custom reporter</a></li>
              </ul>
            </li>

            <li>
              <a href="http://nightwatchjs.org/api#unit-testing">Unit Testing with Nightwatch</a>
              <ul class="nav">
                <li><a href="http://nightwatchjs.org/api#writing-unit-tests">Writing Unit Tests</a></li>
                <li><a href="http://nightwatchjs.org/api#asynchronous-unit-tests">Asynchronous Tests</a></li>
                <li><a href="http://nightwatchjs.org/api#running-the-nightwatch-unit-tests">Running the Nightwatch unit tests</a></li>
                <li><a href="http://nightwatchjs.org/api#using-a-combined-configuration">Using a Combined Configuration</a></li>
                <li><a href="http://nightwatchjs.org/api#code-coverage">Code Coverage</a></li>
              </ul>
            </li>
          </ul>
        </div>
      </div>

      <div class="col-md-9" role="main">
        <div class="docs-section">
          <div class="page-header" id="guide">
            <h2>Overview</h2>
          </div>

    <h3 id="what-is-nightwatch-">What is Nightwatch?</h3>
<p>Nightwatch.js is an automated testing framework for web applications and websites, written in <a href="http://nodejs.org/">Node.js</a> and using the <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol">Selenium WebDriver API</a>.</p>
<p>It is a complete browser automation (<em>End-to-End</em>) solution which aims to simplify the process of setting up <strong>Continuous Integration</strong> and writing of automated tests.</p>
<blockquote>
<p>Nightwatch got its name from the famous painting <a href="http://en.wikipedia.org/wiki/The_Night_Watch">The Night Watch</a> by Dutch painter <a href="http://en.wikipedia.org/wiki/Rembrandt_Harmenszoon_van_Rijn">Rembrandt van Rijn</a>. The masterpiece is prominently displayed in the Rijksmuseum, in Amsterdam - The Netherlands.</p>
</blockquote>

    <h3 id="overview-of-selenium">Overview of Selenium</h3>
<p>Selenium is a very popular and comprehensive set of tools for browser automation, initially written for Java but now with support for most programming languages.</p>
<p>Selenium's main projects are:</p>
<ul>
<li><a href="http://docs.seleniumhq.org/projects/ide/">Selenium IDE</a></li>
<li><a href="http://docs.seleniumhq.org/projects/remote-control/">Selenium Remote Control</a></li>
<li><a href="http://docs.seleniumhq.org/projects/webdriver/">Selenium WebDriver</a></li>
<li><a href="http://docs.seleniumhq.org/projects/grid/">Selenium Grid</a></li>
</ul>
<p>Nightwatch uses the Selenium WebDriver, specifically the <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol">WebDriver Wire Protocol</a> to perform the browser automation related tasks.</p>

    <h3 id="theory-of-operation">Theory of Operation</h3>
<p>Nightwatch works by sending HTTP requests to the Selenium server with the right parameters and interpreting the response. The restful API protocol is defined by the <a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol#/session">Selenium JsonWireProtocol</a>. See below for an example workflow for browser initialization.</p>
<p><img src="./Nightwatch.js - API Reference_files/operation.png" alt="Theory of Operation"></p>
<p>Most of the times, Nightwatch needs to send at least 2 requests to the Selenium server in order to perform a command or assertion, the first one being the request to locate an element given a CSS selector (or Xpath expression) and the next to perform the actual command/assertion on the given element.</p>

        </div>

  <div class="docs-section">
    <div class="page-header">
      <h2 id="installation">Installation</h2>
    </div>

    <h3 id="install-node-js">Install Node.js</h3>
<p>From <a href="http://nodejs.org/">nodejs.org</a>:</p>
<blockquote>
<p>"Node.js is a platform built on Chrome's JavaScript runtime for easily building fast, scalable network applications. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices."</p>
</blockquote>
<p>There are installation packages and instructions for most major Operating systems on its website <a href="http://nodejs.org/">nodejs.org</a>. Remember to install also the <strong>npm</strong> tool, which is the node package manager and is distributed with the Node.js installer.</p>

    <h3 id="install-nightwatch">Install Nightwatch</h3>
<p>To install the latest version using the npm command line tool, run the following:</p>
<pre class=" language-bash"><code class=" language-bash">$ npm install <span class="token punctuation">[</span><span class="token operator">-</span>g<span class="token punctuation">]</span> nightwatch</code></pre>

<p>Add <strong><code>-g</code></strong> option to make <code>nightwatch</code> runner available globally in your system.</p>

    <h3 id="running-the-selenium-server">Running the Selenium Server</h3>
<p>The Selenium WebDriver server is simply a Java servlet which runs separately on the machine with the browser you want to test. You will need to have the <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">Java Development Kit (JDK)</a> installed, minimum required version is 7. You can check this by running <code>java -version</code> from the command line.</p>
<h4 id="download-selenium">Download Selenium</h4>
<p>Download the latest version of the <code>selenium-server-standalone-{VERSION}.jar</code> file from the <a href="http://selenium-release.storage.googleapis.com/index.html">Selenium downloads page</a> and place it on the computer with the browser you want to test.
In most cases this will be on your local machine and typically inside your project's source folder.</p>
<p>A good practice is to create a separate subfolder (e.g. <code>bin</code>) and place it there as you might have to download other driver binaries if you want to test multiple browsers.  </p>
<h4 id="running-selenium-automatically">Running Selenium Automatically</h4>
<p>If the server is on the same machine where Nightwatch is running, it can be started/stopped directly by the <a href="http://local.nightwatchjs.org/guide#test-runner">Nightwatch Test Runner</a>.</p>
<h4 id="running-selenium-manually">Running Selenium Manually</h4>
<p>To run the selenium server manually, from the directory with the jar run the following:</p>
<pre class=" language-bash"><code class=" language-bash">$ java <span class="token operator">-</span>jar selenium<span class="token operator">-</span>server<span class="token operator">-</span>standalone<span class="token operator">-</span><span class="token punctuation">{</span>VERSION<span class="token punctuation">}</span><span class="token punctuation">.</span>jar</code></pre>

<h4 id="using-selenium">Using Selenium</h4>
<p>For viewing all the run-time options, run the previous command adding the <code>-help</code>:</p>
<pre class=" language-bash"><code class=" language-bash">$ java <span class="token operator">-</span>jar selenium<span class="token operator">-</span>server<span class="token operator">-</span>standalone<span class="token operator">-</span><span class="token punctuation">{</span>VERSION<span class="token punctuation">}</span><span class="token punctuation">.</span>jar <span class="token operator">-</span>help</code></pre>

<p>More info about running the Selenium Server can be found here: <a href="https://github.com/SeleniumHQ/selenium/wiki/RemoteWebDriverServer">https://github.com/SeleniumHQ/selenium/wiki/RemoteWebDriverServer</a></p>

    </div>

  <div class="docs-section">
    <div class="page-header">
      <h2 id="settings-file">Configuration</h2>
    </div>
    <br>
    <p>The test runner expects a configuration file to be passed, using by default a <code>nightwatch.json</code> file from the current directory, if present. A <code>nigthwatch.conf.js</code> file will also be loaded by default, if found.</p>
<p>Let's create the <code>nightwatch.json</code> in the project's root folder and this inside:</p>
<pre class=" language-javascript"><code class=" language-javascript"><span class="token punctuation">{</span>
  <span class="token string">"src_folders"</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"tests"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string">"output_folder"</span> <span class="token punctuation">:</span> <span class="token string">"reports"</span><span class="token punctuation">,</span>
  <span class="token string">"custom_commands_path"</span> <span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
  <span class="token string">"custom_assertions_path"</span> <span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
  <span class="token string">"page_objects_path"</span> <span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
  <span class="token string">"globals_path"</span> <span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>

  <span class="token string">"selenium"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">"start_process"</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token string">"server_path"</span> <span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
    <span class="token string">"log_path"</span> <span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
    <span class="token string">"host"</span> <span class="token punctuation">:</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>
    <span class="token string">"port"</span> <span class="token punctuation">:</span> <span class="token number">4444</span><span class="token punctuation">,</span>
    <span class="token string">"cli_args"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token string">"webdriver.chrome.driver"</span> <span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
      <span class="token string">"webdriver.ie.driver"</span> <span class="token punctuation">:</span> <span class="token string">""</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token string">"test_settings"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">"default"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token string">"launch_url"</span> <span class="token punctuation">:</span> <span class="token string">"http://localhost"</span><span class="token punctuation">,</span>
      <span class="token string">"selenium_port"</span>  <span class="token punctuation">:</span> <span class="token number">4444</span><span class="token punctuation">,</span>
      <span class="token string">"selenium_host"</span>  <span class="token punctuation">:</span> <span class="token string">"localhost"</span><span class="token punctuation">,</span>
      <span class="token string">"silent"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token string">"screenshots"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">"enabled"</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token string">"path"</span> <span class="token punctuation">:</span> <span class="token string">""</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token string">"desiredCapabilities"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">"browserName"</span><span class="token punctuation">:</span> <span class="token string">"firefox"</span><span class="token punctuation">,</span>
        <span class="token string">"javascriptEnabled"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token string">"acceptSslCerts"</span><span class="token punctuation">:</span> <span class="token boolean">true</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token string">"chrome"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token string">"desiredCapabilities"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">"browserName"</span><span class="token punctuation">:</span> <span class="token string">"chrome"</span><span class="token punctuation">,</span>
        <span class="token string">"javascriptEnabled"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token string">"acceptSslCerts"</span><span class="token punctuation">:</span> <span class="token boolean">true</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>

<p><br>
Using both configuration files is also possible, with <code>nightwatch.conf.js</code> always taking precedence if both are found.</p>
<h4 id="example">Example</h4>
<pre class=" language-javascript"><code class=" language-javascript">
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  settings<span class="token punctuation">.</span>test_workers <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> settings<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">require<span class="token punctuation">(</span></span><span class="token string">'./nightwatch.json'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>

    <h3 id="basic-settings">Basic settings</h3>
<table class="table table-bordered table-striped">
  <thead>
   <tr>
     <th style="width: 100px;">Name</th>
     <th style="width: 100px;">type</th>
     <th style="width: 50px;">default</th>
     <th>description</th>
   </tr>
  </thead>
  <tbody>
   <tr>
     <td>src_folders</td>
     <td>string|array</td>
     <td>none</td>
     <td>An array of folders (excluding subfolders) where the tests are located.</td>
   </tr>
   <tr>
     <td>output_folder <br><span class="optional">Optional</span></td>
     <td>string</td>
     <td>tests_output</td>
     <td>The location where the JUnit XML report files will be saved.</td>
   </tr>
   <tr>
     <td>custom_commands_path <span class="optional">Optional</span></td>
     <td>string|array</td>
     <td>none</td>
     <td>Location(s) where custom commands will be loaded from.</td>
   </tr>
   <tr>
     <td>custom_assertions_path <span class="optional">Optional</span></td>
     <td>string|array</td>
     <td>none</td>
     <td>Location(s) where custom assertions will be loaded from.</td>
   </tr>
   <tr>
    <td>page_objects_path <br><span class="optional">Optional</span> <span class="optional">since v6.0.1</span></td>
    <td>string|array</td>
    <td>none</td>
    <td>Location(s) where page object files will be loaded from.</td>
  </tr>
   <tr>
     <td>globals_path <br><span class="optional">Optional</span> <span class="optional">since v0.4.8</span></td>
     <td>string</td>
     <td>none</td>
     <td>Location of an external globals module which will be loaded and made available to the test as a property <code>globals</code> on the main client instance. <br><br>Globals can also be defined/overwritten inside a <code>test_settings</code> environment.</td>
   </tr>
   <tr>
     <td>selenium <br><span class="optional">Optional</span></td>
     <td>object</td>
     <td></td>
     <td>An object containing Selenium Server related configuration options. See below for details.</td>
   </tr>
    <tr>
     <td>test_settings</td>
     <td>object</td>
     <td></td>
     <td>This object contains all the test related options. See below for details.</td>
   </tr>
   <tr>
     <td>live_output <br><span class="optional">Optional</span></td>
     <td>boolean</td>
     <td>false</td>
     <td>Whether or not to buffer the output in case of parallel running. See below for details.</td>
   </tr>
   <tr>
     <td>disable_colors <br><span class="optional">Optional</span></td>
     <td>boolean</td>
     <td>false</td>
     <td>Controls whether or not to disable coloring of the cli output globally.</td>
   </tr>
   <tr>
     <td>parallel_process_delay <br><span class="optional">Optional</span></td>
     <td>integer</td>
     <td>10</td>
     <td>Specifies the delay(in milliseconds) between starting the child processes when running in parallel mode.</td>
   </tr>
   <tr>
     <td>test_workers <br><span class="optional">Optional</span> <span class="optional">since v0.7.0</span></td>
     <td>boolean|object</td>
     <td>false</td>
     <td>Whether or not to run individual test files in parallel. If set to <code>true</code>, runs the tests in parallel and determines the number of workers automatically. <br>If set to an object, can specify specify the number of workers as <code>"auto"</code> or a <code>number</code>.
       <br><br>Example: <code>"test_workers" : {"enabled" : true, "workers" : "auto"}</code></td>
   </tr>
   <tr>
    <td>test_runner <br><span class="optional">Optional</span> <span class="optional">since v0.8.0</span></td>
    <td>string|object</td>
    <td>"default"</td>
    <td>Specifies which test runner to use when running the tests. Values can be either <code>default</code> (built in nightwatch runner) or <code>mocha</code>.<br>      <br><br>Example: <code>"test_runner" : {"type" : "mocha", "options" : {"ui" : "tdd"}}</code></td>
    </tr>
  </tbody>
</table>
    <h3 id="selenium-settings">Selenium settings</h3>
<p>Below are a number of options for the selenium server process. Nightwatch can start and stop the Selenium process automatically which is very convenient as you don't have to manage this yourself and focus only on the tests.</p>
<p>If you'd like to enable this, set <code>start_process</code> to <code>true</code> and specify the location of the <code>jar</code> file inside <code>server_path</code>.</p>
<table class="table table-bordered table-striped">
<thead>
 <tr>
   <th style="width: 100px;">Name</th>
   <th style="width: 100px;">type</th>
   <th style="width: 50px;">default</th>
   <th>description</th>
 </tr>
</thead>
<tbody>
 <tr>
   <td>start_process</td>
   <td>boolean</td>
   <td>false</td>
   <td>Whether or not to manage the selenium process automatically.</td>
 </tr>
 <tr>
  <td>start_session<br><span class="optional">since v0.6.1</span></td>
  <td>boolean</td>
  <td>true</td>
  <td>Whether or not to automatically start the Selenium session. This will typically be set to <code>false</code> when running unit/integration tests that don't interact with the Selenium server.</td>
 </tr>

 <tr>
   <td>server_path</td>
   <td>string</td>
   <td>none</td>
   <td>The location of the selenium <code>jar</code> file. This needs to be specified if <code>start_process</code> is enabled.<br>E.g.: <code>lib/selenium-server-standalone-2.43.0.jar</code></td>
 </tr>
 <tr>
   <td>log_path</td>
   <td>string|boolean</td>
   <td>none</td>
   <td>The location where the selenium <code>output.log</code> file will be placed. Defaults to current directory.<br>To disable Selenium logging, set this to <code>false</code></td>
 </tr>
 <tr>
   <td>host</td>
   <td>string</td>
   <td>127.0.0.1</td>
   <td>Usually not required and only used if <code>start_process</code> is <code>true</code>. Specify the IP address you wish Selenium to listen on.</td>
 </tr>
 <tr>
   <td>port</td>
   <td>integer</td>
   <td>4444</td>
   <td>The port number Selenium will listen on.</td>
 </tr>
 <tr>
   <td>cli_args<br><span class="optional">since v0.5.1</span></td>
   <td>object</td>
   <td>none</td>
   <td>List of cli arguments to be passed to the Selenium process. Here you can set various options for browser drivers, such as:<br><br>
     <ul>
       <li>
         <code>webdriver.firefox.profile</code>: Selenium will be default create a new Firefox profile for each session. If you wish to use an existing Firefox profile you can specify its name here.<br>
         Complete list of Firefox Driver arguments available <a href="https://github.com/SeleniumHQ/selenium/wiki/FirefoxDriver" target="_blank">here</a>.
       </li>
       <li>
         <code>webdriver.chrome.driver</code>: Nightwatch can run the tests using <strong>Chrome</strong> browser also. To enable this you have to download the <a href="http://chromedriver.storage.googleapis.com/index.html" target="_blank">ChromeDriver binary</a> and specify it's location here.
     Also don't forget to specify chrome as the browser name in the <code>desiredCapabilities</code> object.<br>
     More information can be found on the <a href="https://sites.google.com/a/chromium.org/chromedriver/" target="_blank">ChromeDriver website</a>.<br>
       </li>
       <li>
         <code>webdriver.ie.driver</code>:
         Nightwatch has support for <strong>Internet Explorer</strong> also. To enable this you have to download the <a href="https://github.com/SeleniumHQ/selenium/wiki/InternetExplorerDriver" target="_blank">IE Driver binary</a> and specify it's location here.
     Also don't forget to specify "internet explorer" as the browser name in the <code>desiredCapabilities</code> object.
       </li>
     </ul>
   </td>
 </tr>
 </tbody>
</table>

    <h3 id="test-settings">Test settings</h3>
<p>Below are a number of settings that will be passed to the Nightwatch instance. You can define multiple sections (environments) of test settings so you could overwrite specific values per environment.</p>
<p class="alert alert-info">A "default" environment is required. All the other environments are inheriting from default and can overwrite settings as needed.</p>


<pre class=" language-bash"><code class=" language-bash"><span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token string">"test_settings"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">"default"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token string">"launch_url"</span> <span class="token punctuation">:</span> <span class="token string">"http://localhost"</span><span class="token punctuation">,</span>
      <span class="token string">"globals"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">"myGlobalVar"</span> <span class="token punctuation">:</span> <span class="token string">"some value"</span><span class="token punctuation">,</span>
        <span class="token string">"otherGlobal"</span> <span class="token punctuation">:</span> <span class="token string">"some other value"</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token string">"integration"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token string">"launch_url"</span> <span class="token punctuation">:</span> <span class="token string">"http://staging.host"</span><span class="token punctuation">,</span>
      <span class="token string">"globals"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">"myGlobalVar"</span> <span class="token punctuation">:</span> <span class="token string">"other value"</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>

<p>The key of the settings group can be passed then to the runner as the <code>--env</code> argument to use the specified settings, like so:</p>
<pre class=" language-bash"><code class=" language-bash">$ nightwatch <span class="token operator">--</span>env integration</code></pre>

<p>This can be useful if you need to have different settings for your local machine and the Continuous Integration server.</p>
<h4 id="the-launch_url-property">The <code>launch_url</code> property</h4>
<p>This property will be made available to the main Nightwatch api which is used in the tests. Its value depends on which environment is used.</p>
<p>If you run your tests as in the example above (with <code>--env integration</code>) <code>launch_url</code> will be set to <code>http://staging.host</code>, as per the configuration. Otherwise it will have the value defined in the <code>default</code> environment (i.e. <code>http://localhost</code>).</p>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string">'Demo test'</span> <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    browser
      <span class="token punctuation">.</span><span class="token function">url<span class="token punctuation">(</span></span>browser<span class="token punctuation">.</span>launchUrl<span class="token punctuation">)</span>
     <span class="token comment" spellcheck="true"> // ...
</span>      <span class="token punctuation">.</span><span class="token function">end<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
</div>

<h4 id="test-globals">Test globals</h4>
<p>A very useful concept that Nightwatch provides is test globals. In its most simple form, this is a dictionary of name-value pairs which is defined in your <code>nightwatch.json</code> configuration file.
Like the <code>launch_url</code> property, this is made available directly on the Nightwatch api which is passed to the tests. It is also dependent on the environment used, having the ability to overwrite specific globals per environment.</p>
<p>If we still pass the <code>--env integration</code> option to the runner, then our globals object will look like below:</p>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string">'Demo test'</span> <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    console<span class="token punctuation">.</span><span class="token function">log<span class="token punctuation">(</span></span>browser<span class="token punctuation">.</span>globals<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment" spellcheck="true"> // {
</span>   <span class="token comment" spellcheck="true"> //   "myGlobalVar" : "some value",
</span>   <span class="token comment" spellcheck="true"> //   "otherGlobal" : "some other value"
</span>   <span class="token comment" spellcheck="true"> // }
</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
</div>

<p><br></p>
<p class="alert alert-info">By default, a deep object copy will be created for each test suite run. If you'd like to maintain the same object throughout the entire tests run, set the <code>persist_globals</code> option to <code>true</code>, as detailed below.</p>

<h4 id="full-list-of-settings">Full list of settings</h4>
<table class="table table-bordered table-striped">
  <thead>
   <tr>
     <th style="width: 100px;">Name</th>
     <th style="width: 100px;">type</th>
     <th style="width: 50px;">default</th>
     <th>description</th>
   </tr>
  </thead>
  <tbody>
   <tr>
     <td>launch_url</td>
     <td>string</td>
     <td>none</td>
     <td>A url which can be used later in the tests as the main url to load. Can be useful if your tests will run on different environments, each one with a different url.</td>
   </tr>
   <tr>
     <td>selenium_host</td>
     <td>string</td>
     <td>localhost</td>
     <td>The hostname/IP on which the selenium server is accepting connections.</td>
   </tr>
   <tr>
     <td>selenium_port</td>
     <td>integer</td>
     <td>4444</td>
     <td>The port number on which the selenium server is accepting connections.</td>
   </tr>
   <tr>
     <td>silent</td>
     <td>boolean</td>
     <td>true</td>
     <td>Whether to show extended Selenium command logs.</td>
   </tr>
   <tr>
     <td>output</td>
     <td>boolean</td>
     <td>true</td>
     <td>Use to disable terminal output completely.</td>
   </tr>
   <tr>
     <td>disable_colors<br><span class="optional">since v0.4.13</span></td>
     <td>boolean</td>
     <td>false</td>
     <td>Use to disable colored output in the terminal.</td>
   </tr>
   <tr>
     <td>firefox_profile<br><span class="optional">deprecated</span></td>
     <td>string|boolean</td>
     <td>none</td>
     <td>
       <i>This options has been deprecated in favor of the <code>cli_args</code> object on the <code>selenium</code> settings object.</i>
     </td>
   </tr>
   <tr>
     <td>chrome_driver<br><span class="optional">deprecated</span></td>
     <td>string</td>
     <td>none</td>
     <td>
       <i>This options has been deprecated in favor of the <code>cli_args</code> object on the <code>selenium</code> settings object.</i>
     </td>
   </tr>
   <tr>
     <td>ie_driver<br><span class="optional">deprecated</span></td>
     <td>string</td>
     <td>none</td>
     <td>
       <i>This options has been deprecated in favor of the <code>cli_args</code> object on the <code>selenium</code> settings object.</i>
     </td>
   </tr>

   <tr>
     <td>screenshots</td>
     <td>object</td>
     <td>none</td>
     <td>Selenium generates screenshots when command errors occur. With <code>on_failure</code> set to true, also generates screenshots for failing or erroring tests. These are saved on the disk. <br><br>Since <code>v0.7.5</code> you can disable screenshots for command errors by setting <code>"on_error"</code> to <code>false</code>.
    <br><br>Example:<br><br><code>"screenshots" : {<br>&nbsp;&nbsp;"enabled" : true,<br>&nbsp;&nbsp;"on_failure" : true,<br>&nbsp;&nbsp;"on_error" : false,<br>&nbsp;&nbsp;"path" : ""<br>}</code></td>
   </tr>
   <tr>
     <td>username</td>
     <td>string</td>
     <td>none</td>
     <td>In case the selenium server requires credentials this username will be used to compute the <code>Authorization</code> header. <br><br>The value can be also an environment variable, in which case it will look like this:<br>
       <code>"username" : "${SAUCE_USERNAME}"</code>
     </td>
   </tr>
   <tr>
     <td>access_key</td>
     <td>string</td>
     <td>none</td>
     <td>This field will be used together with <code>username</code> to compute the <code>Authorization</code> header. <br><br>Like <code>username</code>, the value can be also an environment variable:<br>
       <code>"access_key" : "${SAUCE_ACCESS_KEY}"</code>
     </td>
   </tr>

  <tr>
     <td>proxy<br><span class="optional">since v0.8.6</span></td>
     <td>string</td>
     <td>none</td>
     <td>Proxy requests to the selenium server. http, https, socks(v5), socks5, sock4, and pac are accepted. Uses <a href="https://github.com/TooTallNate/node-proxy-agent" target="_blank">node-proxy-agent</a>.<br><br>Example: <code><a href="http://user:pass@host:port/">http://user:pass@host:port</a></code></td>
   </tr>

   <tr>
     <td>desiredCapabilities</td>
     <td>object</td>
     <td></td>
     <td>An object which will be passed to the Selenium WebDriver when a new session will be created. You can specify browser name for instance along with other capabilities.
       <br>Example:<br><br>
<code>"desiredCapabilities" : {<br>
&nbsp;&nbsp;"browserName" : "firefox", <br>&nbsp;&nbsp;"acceptSslCerts" : true<br>}</code><br>
       You can view the complete list of capabilities <a href="https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities" target="_blank">here</a>.
     </td>
   </tr>

   <tr>
     <td>globals<br><span class="optional">since v0.4.8</span></td>
     <td>object</td>
     <td></td>
     <td>An object which will be made available within the test and can be overwritten per environment. Example:<br><br>
<code>"globals" : {<br>&nbsp;&nbsp;"myGlobal" : "some_global"<br>}</code>
     </td>
   </tr>

   <tr>
     <td>exclude<br><span class="optional">since v0.4.9</span></td>
     <td>array</td>
     <td></td>
     <td>An array of folders or file patterns to be skipped (relative to the main source folder).<br>
       Example:<br><br>
        <code>"exclude" : ["excluded-folder"]</code><br>
       or:<br>
        <code>"exclude" : ["test-folder/*-smoke.js"]</code><br>
     </td>
   </tr>

   <tr>
     <td>filter<br><span class="optional">since v0.5.1</span></td>
     <td>string</td>
     <td></td>
     <td>Folder or file pattern to be used when loading the tests. Files that don't match this patter will be ignored.<br>
       Example:<br><br>
        <code>"filter" : "tests/*-smoke.js"</code><br>
     </td>
   </tr>

   <tr>
      <td>log_screenshot_data</td>
      <td>boolean</td>
      <td>false</td>
      <td>Do not show the Base64 image data in the (verbose) log when taking screenshots.</td>
   </tr>

   <tr>
     <td>use_xpath<br><span class="optional">since v0.5.1</span></td>
     <td>boolean</td>
     <td>false</td>
     <td>Use xpath as the default locator strategy</td>
   </tr>

   <tr>
     <td>cli_args<br><span class="optional">since v0.6.1</span></td>
     <td>object</td>
     <td>none</td>
     <td>Same as Selenium settings <code>cli_args</code>. You can override the global <code>cli_args</code> on a per-environment basis.</td>
   </tr>

   <tr>
     <td>end_session_on_fail<br><span class="optional">since v0.6.5</span></td>
     <td>boolean</td>
     <td>true</td>
     <td>End the session automatically when the test is being terminated, usually after a failed assertion.</td>
  </tr>

  <tr>
     <td>skip_testcases_on_fail<br><span class="optional">since v0.7.0</span></td>
     <td>boolean</td>
     <td>true</td>
     <td>Skip the remaining testcases (or test steps) from the same test suite (i.e. test file), when one testcase fails.</td>
  </tr>

  <tr>
     <td>output_folder<br><span class="optional">since v0.8.18</span></td>
     <td>string|boolean</td>
     <td></td>
     <td>Define the location where the JUnit XML report files will be saved. This will overwrite any value defined in the Basic Settings section. If you'd like to disable the reports completely inside a specific environment, set this to <code>false</code>.</td>
  </tr>

  <tr>
     <td>persist_globals<br><span class="optional">since v0.8.18</span></td>
     <td>boolean</td>
     <td>false</td>
     <td>Set this to <code>true</code> if you'd like to persist the same globals object between testsuite runs or have a (deep) copy of it per each testsuite.</td>
  </tr>

  <tr>
     <td>compatible_testcase_support<br><span class="optional">since v0.9.0</span></td>
     <td>boolean</td>
     <td>false</td>
     <td>Applies to unit tests. When set to <code>true</code> this allows for tests to be written in the standard Exports interface which is interchangeable with the Mocha framework. Prior unit tests interface support is deprecated and this will become the default in future releases.</td>
  </tr>

  <tr>
     <td>detailed_output<br><span class="optional">since v0.9.0</span></td>
     <td>boolean</td>
     <td>true</td>
     <td>By default detailed assertion output is displayed while the test is running. Set this to <code>false</code> if you'd like to only see the test case name displayed and pass/fail status. This is especially useful when running tests in parallel.</td>
  </tr>

  </tbody>
</table>

  </div>


  <div class="docs-section">
    <div class="page-header">
      <h2 id="usage">Using Nightwatch</h2>
    </div>

<h3 id="writing-tests">Writing Tests</h3>
<p>Using the preferred CSS selector model to locate elements on a page, Nightwatch makes it very easy to write automated End-to-End tests.</p>
<p>Create a separate folder for tests in your project, e.g.: <code>tests</code>. Each file inside it will be loaded as a test by the Nightwatch test runner. A basic test will look like this:</p>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string">'Demo test Google'</span> <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    browser
      <span class="token punctuation">.</span><span class="token function">url<span class="token punctuation">(</span></span><span class="token string">'http://www.google.com'</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">waitForElementVisible<span class="token punctuation">(</span></span><span class="token string">'body'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">setValue<span class="token punctuation">(</span></span><span class="token string">'input[type=text]'</span><span class="token punctuation">,</span> <span class="token string">'nightwatch'</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">waitForElementVisible<span class="token punctuation">(</span></span><span class="token string">'button[name=btnG]'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">click<span class="token punctuation">(</span></span><span class="token string">'button[name=btnG]'</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">pause<span class="token punctuation">(</span></span><span class="token number">1000</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">containsText<span class="token punctuation">(</span></span><span class="token string">'#main'</span><span class="token punctuation">,</span> <span class="token string">'Night Watch'</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">end<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
</div>
<br>
<p class="alert alert-warning">
Remember <strong>always</strong> to call the <code>.end()</code> method when you want to close your test, in order for the Selenium session to be properly closed.
</p>

A test can have multiple steps, if needed:

<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string">'step one'</span> <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    browser
      <span class="token punctuation">.</span><span class="token function">url<span class="token punctuation">(</span></span><span class="token string">'http://www.google.com'</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">waitForElementVisible<span class="token punctuation">(</span></span><span class="token string">'body'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">setValue<span class="token punctuation">(</span></span><span class="token string">'input[type=text]'</span><span class="token punctuation">,</span> <span class="token string">'nightwatch'</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">waitForElementVisible<span class="token punctuation">(</span></span><span class="token string">'button[name=btnG]'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token string">'step two'</span> <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    browser
      <span class="token punctuation">.</span><span class="token function">click<span class="token punctuation">(</span></span><span class="token string">'button[name=btnG]'</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">pause<span class="token punctuation">(</span></span><span class="token number">1000</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">containsText<span class="token punctuation">(</span></span><span class="token string">'#main'</span><span class="token punctuation">,</span> <span class="token string">'Night Watch'</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">end<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>

<p>Tests can also be written in this format:</p>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTestGoogle <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  browser
    <span class="token punctuation">.</span><span class="token function">url<span class="token punctuation">(</span></span><span class="token string">'http://www.google.com'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">waitForElementVisible<span class="token punctuation">(</span></span><span class="token string">'body'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">setValue<span class="token punctuation">(</span></span><span class="token string">'input[type=text]'</span><span class="token punctuation">,</span> <span class="token string">'nightwatch'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">waitForElementVisible<span class="token punctuation">(</span></span><span class="token string">'button[name=btnG]'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">click<span class="token punctuation">(</span></span><span class="token string">'button[name=btnG]'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pause<span class="token punctuation">(</span></span><span class="token number">1000</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">containsText<span class="token punctuation">(</span></span><span class="token string">'#main'</span><span class="token punctuation">,</span> <span class="token string">'The Night Watch'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">end<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
</div>

<h3 id="using-xpath-selectors">Using XPath selectors</h3>
<p>Nightwatch supports xpath selectors also. To switch to xpath instead of css selectors as the locate strategy, in your test call the method <code>useXpath()</code>, as seen in the example below. To switch back to CSS, call <code>useCss()</code>.</p>
<p>To always use xpath by default set the property <code>"use_xpath": true</code> in your test settings.</p>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTestGoogle <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  browser
    <span class="token punctuation">.</span><span class="token function">useXpath<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"> // every selector now must be xpath
</span>    <span class="token punctuation">.</span><span class="token function">click<span class="token punctuation">(</span></span><span class="token comment" spellcheck="true">"//tr[@data-recordid]/span[text()='Search Text']")
</span>    <span class="token punctuation">.</span><span class="token function">useCss<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"> // we're back to CSS now
</span>    <span class="token punctuation">.</span><span class="token function">setValue<span class="token punctuation">(</span></span><span class="token string">'input[type=text]'</span><span class="token punctuation">,</span> <span class="token string">'nightwatch'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
</div>
<h3 id="bdd-expect-assertions">BDD Expect Assertions</h3>
<p>Nightwatch introduces starting with version <code>v0.7</code> a new BDD-style assertion library which greatly improves the flexibility as well as readability of the assertions.</p>
<p>The <code>expect</code> assertions use a subset of the <code>Expect</code> api from the <a href="http://chaijs.com/api/bdd/">Chai framework</a> and are available for elements only at this point. Here's an example:</p>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string">'Demo test Google'</span> <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>client<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    client
      <span class="token punctuation">.</span><span class="token function">url<span class="token punctuation">(</span></span><span class="token string">'http://google.no'</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">pause<span class="token punctuation">(</span></span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment" spellcheck="true"> // expect element  to be present in 1000ms
</span>    client<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span>present<span class="token punctuation">.</span><span class="token function">before<span class="token punctuation">(</span></span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment" spellcheck="true"> // expect element &lt;#lst-ib&gt; to have css property 'display'
</span>    client<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'#lst-ib'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">css<span class="token punctuation">(</span></span><span class="token string">'display'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment" spellcheck="true"> // expect element  to have attribute 'class' which contains text 'vasq'
</span>    client<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">attribute<span class="token punctuation">(</span></span><span class="token string">'class'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>which<span class="token punctuation">.</span><span class="token function">contains<span class="token punctuation">(</span></span><span class="token string">'vasq'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment" spellcheck="true"> // expect element &lt;#lst-ib&gt; to be an input tag
</span>    client<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'#lst-ib'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token function">an<span class="token punctuation">(</span></span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment" spellcheck="true"> // expect element &lt;#lst-ib&gt; to be visible
</span>    client<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'#lst-ib'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span>visible<span class="token punctuation">;</span>

    client<span class="token punctuation">.</span><span class="token function">end<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
</div>

<p><br>
The <code>expect</code> interface provides a much more flexible and fluid language for defining assertions, significantly improved over the existing <code>assert</code> interface. The only downside is that it's not possible to chain assertions anymore and at this point custom messages aren't yet supported.</p>
<p><br>
For a complete list of available <code>expect</code> assertions, refer to the <a href="http://nightwatchjs.org/api/#expect">API docs</a>.</p>

<h3 id="using-before-each-and-after-each-hooks">Using before[Each] and after[Each] hooks</h3>
<p>Nightwatch provides the standard <code>before</code>/<code>after</code> and <code>beforeEach</code>/<code>afterEach</code> hooks to be used in the tests.</p>
<p>The <code>before</code> and <code>after</code> will run before and after the execution of the test suite respectively, while <code>beforeEach</code> and <code>afterEach</code> are ran before and after each testcase (test step).</p>
<p>All methods have the Nightwatch instance passed as argument.</p>
<h4 id="example-">Example:</h4>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  before <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log<span class="token punctuation">(</span></span><span class="token string">'Setting up...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  after <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log<span class="token punctuation">(</span></span><span class="token string">'Closing down...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  beforeEach <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  afterEach <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token string">'step one'</span> <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    browser
    <span class="token comment" spellcheck="true"> // ...
</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token string">'step two'</span> <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    browser
   <span class="token comment" spellcheck="true"> // ...
</span>      <span class="token punctuation">.</span><span class="token function">end<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
</div>

<p>In the example above the sequence of method calls will be as follows: <code>before(), beforeEach(), "step one", afterEach(), beforeEach(), "step two", afterEach(), after()</code>.</p>
<p class="alert alert-warning">
For backwards compatibility reasons, the <code>afterEach</code> hook can receive the <code>browser</code> object only in its async form - <code>afterEach(browser, done) { .. }</code>
</p>
<h3 id="asynchronous-before-each-and-after-each-">Asynchronous before[Each] and after[Each]</h3>
<p>All the <code>before[Each]</code> and <code>after[Each]</code> methods can also perform asynchronous operations, in which case they will require the <code>callback</code> passed as the second argument.</p>
<div class="alert alert-warning">
The <code>done</code> function <strong>must be called</strong> as the last step when the async operation completes. Not calling it will result in a timeout error.
</div>

<p></p><h4>Example with beforeEach &amp; afterEach:</h4><p></p>
<div class="sample-test">
<pre class=" language-javascript"><code class=" language-javascript">
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  beforeEach<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>browser<span class="token punctuation">,</span> done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment" spellcheck="true"> // performing an async operation
</span>    <span class="token function">setTimeout<span class="token punctuation">(</span></span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token comment" spellcheck="true"> // finished async duties
</span>      <span class="token function">done<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  afterEach<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>browser<span class="token punctuation">,</span> done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment" spellcheck="true"> // performing an async operation
</span>    <span class="token function">setTimeout<span class="token punctuation">(</span></span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token comment" spellcheck="true"> // finished async duties
</span>      <span class="token function">done<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
</div>

<h4 id="controlling-the-done-invocation-timeout">Controlling the <code>done</code> invocation timeout</h4>
<p>By default the <code>done</code> invocation timeout is set to 10 seconds (2 seconds for unit tests). In some cases this might not be sufficient and to avoid a timeout error, you can increase this timeout by defining an <code>asyncHookTimeout</code> property (in milliseconds) in your external globals file (see below for details on external globals).</p>
<p>For an example, refer to the provided <a href="https://github.com/nightwatchjs/nightwatch/blob/master/examples/globalsModule.js#L20">globalsModule</a> example.</p>
<h4 id="explicitly-failing-the-test">Explicitly failing the test</h4>
<p>Failing the test intentionally in a test hook is achievable by simply calling <code>done</code> with an <code>Error</code> argument:</p>
<div class="sample-test">
<pre class=" language-javascript"><code class=" language-javascript">
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  afterEach<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>browser<span class="token punctuation">,</span> done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment" spellcheck="true"> // performing an async operation
</span>    <span class="token function">performAsync<span class="token punctuation">(</span></span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">done<span class="token punctuation">(</span></span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
     <span class="token comment" spellcheck="true"> // ...
</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
</div>

<h3 id="external-globals">External Globals</h3>
<p>Most of the time it's more useful to have your globals defined in an external file, specified in the <code>globals_path</code> property, instead of having them defined in <code>nightwatch.json</code>.</p>
<p>You can overwrite globals per environment as needed. Say you have your tests running locally and also against a remote staging server. Most of the times you will need some different setting up.</p>
<h4 id="global-hooks">Global Hooks</h4>
<p>The same set of hooks as per test suite is also available globally, outside the scope of the test. See the below example for more details.
In the case of global hooks, the <code>beforeEach</code> and <code>afterEach</code> refers to a test suite (i.e. test file), and are ran before and after a <em>test suite</em>.</p>
<h4 id="global-settings">Global Settings</h4>
<p>There are a number of globals which are holding test settings and can control test execution. These are detailed in the provided <a href="https://github.com/nightwatchjs/nightwatch/blob/master/examples/globalsModule.js">globalsModule</a> sample.</p>
<h4 id="example-">Example:</h4>
<div class="sample-test">
<pre class=" language-javascript"><code class=" language-javascript">
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string">'default'</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>
    isLocal <span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token string">'integration'</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>
    isLocal <span class="token punctuation">:</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

 <span class="token comment" spellcheck="true"> // External before hook is ran at the beginning of the tests run, before creating the Selenium session
</span>  before<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment" spellcheck="true"> // run this only for the local-env
</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>isLocal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token comment" spellcheck="true"> // start the local server
</span>      App<span class="token punctuation">.</span><span class="token function">startServer<span class="token punctuation">(</span></span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token comment" spellcheck="true"> // server listening
</span>        <span class="token function">done<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">done<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

 <span class="token comment" spellcheck="true"> // External after hook is ran at the very end of the tests run, after closing the Selenium session
</span>  after<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment" spellcheck="true"> // run this only for the local-env
</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>isLocal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token comment" spellcheck="true"> // start the local server
</span>      App<span class="token punctuation">.</span><span class="token function">stopServer<span class="token punctuation">(</span></span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token comment" spellcheck="true"> // shutting down
</span>        <span class="token function">done<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">done<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

 <span class="token comment" spellcheck="true"> // This will be run before each test suite is started
</span>  beforeEach<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>browser<span class="token punctuation">,</span> done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment" spellcheck="true"> // getting the session info
</span>    browser<span class="token punctuation">.</span><span class="token function">status<span class="token punctuation">(</span></span><span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log<span class="token punctuation">(</span></span>result<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">done<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

 <span class="token comment" spellcheck="true"> // This will be run after each test suite is finished
</span>  afterEach<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>browser<span class="token punctuation">,</span> done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log<span class="token punctuation">(</span></span>browser<span class="token punctuation">.</span>currentTest<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">done<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
</div>

</div>

<div class="docs-section">
  <div class="page-header">
    <h2 id="running-tests">Running Tests</h2>
  </div>

  <h3 id="test-runner">Test Runner</h3>
<p>Nightwatch includes a command-line test runner which makes it easy to run tests and generate useful output. There are a few different options on how to use the test runner, depending on your installation type.</p>
<h4 id="global">Global</h4>
<p>If you have installed Nightwatch globally (with <code>-g</code> option), the binary <code>nightwatch</code> will be available anywhere:</p>
<pre class=" language-bash"><code class=" language-bash">$ nightwatch <span class="token punctuation">[</span>source<span class="token punctuation">]</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span></code></pre>

<h4 id="project-specific">Project specific</h4>
<p>If you have Nightwatch installed as a dependency of your project, you can refer the binary from the <code>node_modules/.bin</code> folder:</p>
<p><br></p>
<h5 id="linux-and-macosx-">Linux and MacOSX:</h5>
<pre class=" language-bash"><code class=" language-bash">$ <span class="token punctuation">.</span><span class="token operator">/</span>node_modules<span class="token operator">/</span><span class="token punctuation">.</span>bin<span class="token operator">/</span>nightwatch <span class="token punctuation">[</span>source<span class="token punctuation">]</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span></code></pre>

<p><br></p>
<h5 id="windows-">Windows:</h5>
<p>Create a file <code>nightwatch.js</code> and add the following line:</p>
<pre class=" language-bash"><code class=" language-bash"><span class="token function">require<span class="token punctuation">(</span></span><span class="token string">'nightwatch/bin/runner.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>Then run as follows:</p>
<pre class=" language-bash"><code class=" language-bash">C<span class="token punctuation">:</span>\workspace\project<span class="token operator">&gt;</span> node nightwatch<span class="token punctuation">.</span>js <span class="token punctuation">[</span>source<span class="token punctuation">]</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span></code></pre>

<h4 id="tests-source">Tests source</h4>
<p>The optional <code>source</code> argument can be either one or more files or an entire folder. This can be located irrespectively of the <code>src_folders</code> setting.</p>
<p><br></p>
<h5 id="example-single-test-">Example - single test:</h5>
<pre class=" language-bash"><code class=" language-bash">$ nightwatch tests<span class="token operator">/</span>one<span class="token operator">/</span>firstTest<span class="token punctuation">.</span>js</code></pre>

<p><br></p>
<h5 id="example-2-individual-tests-">Example - 2 individual tests:</h5>
<pre class=" language-bash"><code class=" language-bash">$ nightwatch tests<span class="token operator">/</span>one<span class="token operator">/</span>firstTest<span class="token punctuation">.</span>js tests<span class="token operator">/</span>secondTest<span class="token punctuation">.</span>js</code></pre>

<p><br></p>
<h5 id="example-1-individual-test-and-1-folder-">Example - 1 individual test and 1 folder:</h5>
<pre class=" language-bash"><code class=" language-bash">$ nightwatch tests<span class="token operator">/</span>one<span class="token operator">/</span>test<span class="token punctuation">.</span>js tests<span class="token operator">/</span>utils</code></pre>

  <h3 id="command-line-options">Command-line Options</h3>
<p>The test runner supports a number of run-time options to be passed to. To view all, run the following:</p>
<pre class=" language-bash"><code class=" language-bash">$ nightwatch <span class="token operator">--</span>help</code></pre>

<div class="table-responsive">
  <table class="table table-bordered table-striped">
    <thead>
     <tr>
       <th style="width: 100px;">Name</th>
       <th style="width: 100px;">Shortname</th>
       <th style="width: 50px;">default</th>
       <th>description</th>
     </tr>
    </thead>
    <tbody>
     <tr>
       <td><code>--config</code></td>
       <td><code>-c</code></td>
       <td><code>./nightwatch.json</code></td>
       <td>The location of the <code>nightwatch.json</code> file - the configuration file which the runner uses and which also includes the Selenium WebDriver options.</td>
     </tr>
     <tr>
       <td><code>--output</code></td>
       <td><code>-o</code></td>
       <td><code>tests_output</code></td>
       <td>The location where the JUnit XML reports will be saved.</td>
     </tr>
     <tr>
        <td><code>--reporter</code></td>
        <td><code>-r</code></td>
        <td><code>junit</code></td>
        <td>Name of a predefined reporter (e.g. junit) or path to a custom reporter file to use.</td>
     </tr>
     <tr>
       <td><code>--env</code></td>
       <td><code>-e</code></td>
       <td><code>default</code></td>
       <td>Which testing environment to use - defined in <code>nightwatch.json</code></td>
     </tr>
     <tr>
       <td><code>--verbose</code></td>
       <td><code></code></td>
       <td></td>
       <td>Shows extended selenium command logging during the session</td>
     </tr>
     <tr>
       <td><code>--version</code></td>
       <td><code>-v</code></td>
       <td></td>
       <td>Shows the version number</td>
     </tr>
     <tr>
       <td><code>--test</code></td>
       <td><code>-t</code></td>
       <td></td>
       <td>Runs only the specified test. By default it will attempt to run all tests in the folder and its subfolders.</td>
     </tr>
     <tr>
       <td><code>--testcase</code></td>
       <td></td>
       <td></td>
       <td>Used only together with <code>--test</code>. Runs the specified testcase from the current suite/module.</td>
     </tr>
     <tr>
       <td><code>--group</code></td>
       <td><code>-g</code></td>
       <td></td>
       <td>Runs only the specified group of tests (subfolder). Tests are grouped by being placed in the same subfolder.</td>
     </tr>
     <tr>
       <td><code>--skipgroup</code></td>
       <td><code>-s</code></td>
       <td></td>
       <td>Skip one or several (comma separated) group of tests.</td>
     </tr>
     <tr>
       <td><code>--filter</code></td>
       <td><code>-f</code></td>
       <td></td>
       <td>Specify a filter (glob expression) as the file name format to use when loading the test files.</td>
     </tr>
     <tr>
       <td><code>--tag</code></td>
       <td><code>-a</code></td>
       <td></td>
       <td>Filter test modules by tags. Only tests that have the specified tags will be loaded.</td>
     </tr>
     <tr>
        <td><code>--skiptags</code></td>
        <td></td>
        <td></td>
        <td>Skips tests that have the specified tag or tags (comma separated).</td>
      </tr>
     <tr>
        <td><code>--retries</code></td>
        <td></td>
        <td></td>
        <td>Retries failed or errored testcases up to the specified number of times. Retrying a testcase will also retry the <code>beforeEach</code> and <code>afterEach</code> hooks, if any.</td>
      </tr>
      <tr>
       <td><code>--suiteRetries</code></td>
       <td></td>
       <td></td>
       <td>Retries failed or errored testsuites (test modules) up to the specified number of times. Retrying a testsuite will also retry the <code>before</code> and <code>after</code> hooks (in addition to the global beforeEach and afterEach respectively), if any are defined on the testsuite.</td>
     </tr>

    </tbody>
  </table>
</div>

  <h3 id="test-groups">Test Groups</h3>
<p>Nightwatch makes it possible to organize your test scripts into groups and run them as needed. To group tests together just place them in the same sub-folder. The folder name is the name of the group.</p>
<h4 id="example-">Example:</h4>
<pre>lib/
  ├── selenium-server-standalone.jar
custom-commands/
  ├── loginUser.js
  ├── attachPicture.js
tests/
  ├── logingroup
  |   ├── login_test.js
  |   └── otherlogin_test.js
  ├── addressbook
  |   ├── addressbook_test.js
  |   └── contact_test.js
  ├── chat
  |   ├── chatwindow_test.js
  |   ├── chatmessage_test.js
  |   └── otherchat_test.js
  └── smoketests
      ├── smoke_test.js
      └── othersmoke_test.js
</pre>

<p>To run only the <code>smoketests</code> group you would do the following:</p>
<pre class=" language-bash"><code class=" language-bash">$ nightwatch <span class="token operator">--</span>group smoketests</code></pre>

<p>Also, if you would want to skip running the <code>smoketests</code> group you would do the following:</p>
<pre class=" language-bash"><code class=" language-bash">$ nightwatch <span class="token operator">--</span>skipgroup smoketests</code></pre>

<p>To skip multiple groups, just add them as comma-separated:</p>
<pre class=" language-bash"><code class=" language-bash">$ nightwatch <span class="token operator">--</span>skipgroup addressbook<span class="token punctuation">,</span>chat</code></pre>
  <h3 id="test-tags">Test Tags</h3>
<p>You can also selectively target tests to run based on tags, such that a test may be belong to multiple tags. For example, you might have a login test that belongs to a login suite as well as a sanity suite.</p>
<p>The tagging can be accomplished by adding the <code>@tags</code> property to a test module:</p>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string">'@tags'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'login'</span><span class="token punctuation">,</span> <span class="token string">'sanity'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string">'demo login test'</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>client<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true"> // test code
</span>  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
</div>

<p>To select which tags to run, use the <code>--tag</code> command line flag:</p>
<pre class=" language-bash"><code class=" language-bash">$ nightwatch <span class="token operator">--</span>tag login</code></pre>

<p>Specify multiple tags as:</p>
<pre class=" language-bash"><code class=" language-bash">$ nightwatch <span class="token operator">--</span>tag login <span class="token operator">--</span>tag something_else</code></pre>

<p><br>
To skip running tests with a specific tag, use the <code>--skiptags</code> flag:</p>
<pre class=" language-bash"><code class=" language-bash">$ nightwatch <span class="token operator">--</span>skiptags login</code></pre>

<p>Or to skip multiple tags, add each tag you want to skip as comma-separated:</p>
<pre class=" language-bash"><code class=" language-bash">$ nightwatch <span class="token operator">--</span>skiptags login<span class="token punctuation">,</span>something_else</code></pre>

  <h3 id="disabling-tests">Disabling Tests</h3>
<p>To prevent a test module from running, simply set the <code>disabled</code> attribute in that module to <code>true</code>, like so:</p>
<pre class=" language-javascript"><code class=" language-javascript">
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string">'@disabled'</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true"> // This will prevent the test module from running.
</span>
  <span class="token string">'sample test'</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>client<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment" spellcheck="true"> // test code
</span>  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>

<p>This can be useful if you don't want to run certain tests that are known to be failing.</p>
<h4 id="disabling-individual-testcases">Disabling Individual Testcases</h4>
<p>Disabling individual testcases isn't currently supported out of the box. However it can be achieved relatively straightforward with a simple work-around. By simply converting the test method to a string, Nightwatch will ignore it.</p>
<p>Here's an example:</p>
<pre class=" language-javascript"><code class=" language-javascript">
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string">'sample test'</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>client<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment" spellcheck="true"> // test code
</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>

 <span class="token comment" spellcheck="true"> // disabled
</span>  <span class="token string">'other sample test'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token operator">+</span><span class="token keyword">function</span> <span class="token punctuation">(</span>client<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment" spellcheck="true"> // test code
</span>  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>

  <h3 id="parallel-running">Parallel Running</h3>
<p>Starting with <code>v0.5</code> Nightwatch supports the tests to be run in parallel. This works by specifying multiple environments in the command line, separated by comma. E.g.:</p>
<pre class=" language-bash"><code class=" language-bash">$ nightwatch <span class="token operator">-</span>e default<span class="token punctuation">,</span>chrome</code></pre>

<p>The above will run two environments named <code>default</code> and <code>chrome</code> in parallel.</p>
<h4 id="terminal-output">Terminal Output</h4>
<p>Each environment will be run as a separate <a href="http://nodejs.org/api/child_process.html"><code>child_process</code></a> and the output will be sent to the main process.</p>
<p>To make the output easier to read, Nightwatch by default buffers the output from each child process and displays everything at the end, grouped by environment.</p>
<div class="alert alert-warning">
  If you'd like to disable the output buffering and see the output from each child process as it is sent to stdout, simply set the property <code>"live_output" : true</code> on the top level in your <code>nightwatch.json</code> (e.g. after <code>selenium</code>).
</div>

<div class="alert alert-info">
  You can create a separate environment per browser (by chaining <code>desiredCapabilities</code>) and then run them in parallel. In addition, using the <code>filter</code> and <code>exclude</code> options tests can be split per environment in order to be ran in parallel.
</div>

<h4 id="via-workers">Via Workers</h4>
<p>Version <code>v0.7</code> introduces a new feature which allows the tests to be run in parallel. When this is enabled the test runner will launch a configurable number of child processes and then distribute the loaded tests over to be ran in parallel.</p>
<p>To enable test workers, set the <code>test_workers</code> top-level property, like so:</p>
<pre class=" language-javascript"><code class=" language-javascript">
<span class="token string">"test_workers"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
  <span class="token string">"enabled"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token string">"workers"</span><span class="token punctuation">:</span> <span class="token string">"auto"</span>
<span class="token punctuation">}</span>   
</code></pre>

<p>or, simply:</p>
<p></p><pre class=" language-javascript"><code class=" language-javascript">
<span class="token string">"test_workers"</span><span class="token punctuation">:</span> <span class="token boolean">true</span>
</code></pre>
<br>
The <code>workers</code> option configures how many child processes can run concurrently.<p></p>
<ul>
<li><code>"auto"</code> - determined by number of CPUs e.g. 4 CPUs means 4 workers</li>
<li><code>{number}</code> - specifies an exact number of workers</li>
</ul>
<p>Test concurrency is done at the file level. Each test file will fill a test worker slot. Individual tests/steps in a test file will not run concurrently.</p>
<div class="alert alert-warning">
Version 0.9 brings improved support for displaying output when running tests in parallel. We recommend setting <code>detailed_option</code> to <code>false</code> in your test settings for improved output readability.
</div>

  <h3 id="using-grunt">Using Grunt</h3>
<p><a href="http://gruntjs.com/" target="_blank">Grunt</a> is a popular JavaScript task runner. Starting with version <code>0.6</code> Nightwatch is bundled with 
an easy to use Grunt task which can be used in your existing Grunt-based build configuration for running the tests.</p>
<h4 id="usage">Usage</h4>
<p>First, load the Nightwatch grunt task at the top in your <code>Gruntfile.js</code>. </p>
<div class="sample-test">
<pre class=" language-javascript"><code class=" language-javascript">
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>grunt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> nightwatch <span class="token operator">=</span> <span class="token function">require<span class="token punctuation">(</span></span><span class="token string">'nightwatch'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  nightwatch<span class="token punctuation">.</span><span class="token function">initGrunt<span class="token punctuation">(</span></span>grunt<span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token comment" spellcheck="true"> // ...
</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
</div>

<h4 id="task-configuration-and-targets">Task Configuration and Targets</h4>
<p>The Nightwatch task will have one more more targets which can be used in various ways, one way being to map them to environments. Available settings are:</p>
<ul>
<li><code>options</code> - the only available option so far is <code>cwd</code> - current working directory</li>
<li><code>argv</code> - command-line arguments that would normally be passed to the Nightwatch runner (e.g.: <code>env</code>);</li>
<li><code>settings</code> - the test settings specified to a single Nightwatch environment.</li>
</ul>
<h4 id="example">Example</h4>
<div class="sample-test">
<pre class=" language-javascript"><code class=" language-javascript">
grunt<span class="token punctuation">.</span><span class="token function">initConfig<span class="token punctuation">(</span></span><span class="token punctuation">{</span>
  nightwatch<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    options<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      cwd<span class="token punctuation">:</span> <span class="token string">'./'</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token string">'default'</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>

    browserstack<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      argv<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        env<span class="token punctuation">:</span> <span class="token string">'browserstack'</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      settings<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        silent<span class="token punctuation">:</span> <span class="token boolean">true</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token string">'all'</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>
      argv<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        env<span class="token punctuation">:</span> <span class="token string">'default,browserstack'</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
</div>

<p><br></p>
<p>Run the task as follows:</p>
<pre class=" language-bash"><code class=" language-bash">$ grunt nightwatch<span class="token punctuation">:</span>default</code></pre> 
or 

<pre class=" language-bash"><code class=" language-bash">$ grunt nightwatch<span class="token punctuation">:</span>browserstack</code></pre>

<p><br></p>
<p>There are also a few third-party Grunt plugins for Nightwatch which can be used instead, if you prefer. The most popular one is <a href="https://github.com/gextech/grunt-nightwatch" target="_blank">grunt-nightwatch</a>. </p>

  <h3 id="using-mocha">Using Mocha</h3>
<p>Starting with version <code>0.8</code> Nightwatch is bundled with a custom version of the popular Mocha test runner which allows running tests using Mocha, thus taking advantage of its interfaces and reporters.</p>
<h4 id="usage">Usage</h4>
<p>There are two main ways in which you can use Mocha with Nightwatch.</p>
<h4 id="from-nightwatch">From Nightwatch</h4>
<p>Mocha is used as an alternative test runner to the built-in one. This is done by specifying the <code>"test_runner"</code> option in the <code>nightwatch.json</code> configuration file.</p>
<p>Custom options can also be specified for Mocha:</p>
<div class="sample-test">
<pre class=" language-javascript"><code class=" language-javascript">
<span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token string">"test_runner"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">"type"</span> <span class="token punctuation">:</span> <span class="token string">"mocha"</span><span class="token punctuation">,</span>
    <span class="token string">"options"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token string">"ui"</span> <span class="token punctuation">:</span> <span class="token string">"tdd"</span><span class="token punctuation">,</span>
      <span class="token string">"reporter"</span> <span class="token punctuation">:</span> <span class="token string">"list"</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre>
</div>

<p>or simply:</p>
<div class="sample-test">
<pre class=" language-javascript"><code class=" language-javascript">
<span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token string">"test_runner"</span> <span class="token punctuation">:</span> <span class="token string">"mocha"</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre>
</div>

<p>A complete list of Mocha options that are supported can be found <a href="https://github.com/mochajs/mocha/wiki/Using-mocha-programmatically#set-options">here</a>.</p>
<p>The <code>test_runner</code> option can also be specified at test environment level:</p>
<div class="sample-test">
<pre class=" language-javascript"><code class=" language-javascript">
<span class="token punctuation">{</span>
  <span class="token string">"test_settings"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">"mocha_tests"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token string">"test_runner"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">"type"</span> <span class="token punctuation">:</span> <span class="token string">"mocha"</span><span class="token punctuation">,</span>
        <span class="token string">"options"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>
          <span class="token string">"ui"</span> <span class="token punctuation">:</span> <span class="token string">"tdd"</span><span class="token punctuation">,</span>
          <span class="token string">"reporter"</span> <span class="token punctuation">:</span> <span class="token string">"list"</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre>
</div>

<h4 id="example">Example</h4>
<p>Writing a test in Mocha is the same as writing it in Nightwatch. Each testcase receives the <code>client</code> object, <code>hooks</code> also receiving a <code>done</code> callback for async operations.</p>
<div class="sample-test">
<pre class=" language-javascript"><code class=" language-javascript">
<span class="token function">describe<span class="token punctuation">(</span></span><span class="token string">'Google demo test for Mocha'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token function">describe<span class="token punctuation">(</span></span><span class="token string">'with Nightwatch'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token function">before<span class="token punctuation">(</span></span><span class="token keyword">function</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">done<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">after<span class="token punctuation">(</span></span><span class="token keyword">function</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      client<span class="token punctuation">.</span><span class="token function">end<span class="token punctuation">(</span></span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">done<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">afterEach<span class="token punctuation">(</span></span><span class="token keyword">function</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">done<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">beforeEach<span class="token punctuation">(</span></span><span class="token keyword">function</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">done<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">it<span class="token punctuation">(</span></span><span class="token string">'uses BDD to run the Google simple test'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      client
        <span class="token punctuation">.</span><span class="token function">url<span class="token punctuation">(</span></span><span class="token string">'http://google.com'</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span>present<span class="token punctuation">.</span><span class="token function">before<span class="token punctuation">(</span></span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      client<span class="token punctuation">.</span><span class="token function">setValue<span class="token punctuation">(</span></span><span class="token string">'input[type=text]'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'nightwatch'</span><span class="token punctuation">,</span> client<span class="token punctuation">.</span>Keys<span class="token punctuation">.</span>ENTER<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">pause<span class="token punctuation">(</span></span><span class="token number">1000</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">containsText<span class="token punctuation">(</span></span><span class="token string">'#main'</span><span class="token punctuation">,</span> <span class="token string">'Night Watch'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
</div>

<p class="alert alert-warning">When using the mocha test runner from Nightwatch some cli options are not available, like <code>--retries</code>, <code>--suiteRetries</code>, <code>--reporter</code>.</p>

<h4 id="using-the-standard-mocha">Using the standard Mocha</h4>
<p>Running Nightwatch tests with the standard Mocha it's also possible, though a bit more boilerplate code is involved and you need to manage the selenium server.</p>
<h4 id="example">Example</h4>
<div class="sample-test">
<pre class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">var</span> nightwatch <span class="token operator">=</span> <span class="token function">require<span class="token punctuation">(</span></span><span class="token string">'nightwatch'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">describe<span class="token punctuation">(</span></span><span class="token string">'Github'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> client <span class="token operator">=</span> nightwatch<span class="token punctuation">.</span><span class="token function">initClient<span class="token punctuation">(</span></span><span class="token punctuation">{</span>
    silent <span class="token punctuation">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">var</span> browser <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">api<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">timeout<span class="token punctuation">(</span></span><span class="token number">99999999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">before<span class="token punctuation">(</span></span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    browser<span class="token punctuation">.</span><span class="token function">perform<span class="token punctuation">(</span></span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log<span class="token punctuation">(</span></span><span class="token string">'beforeAll'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">beforeEach<span class="token punctuation">(</span></span><span class="token keyword">function</span><span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    browser<span class="token punctuation">.</span><span class="token function">perform<span class="token punctuation">(</span></span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log<span class="token punctuation">(</span></span><span class="token string">'beforeEach'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    client<span class="token punctuation">.</span><span class="token function">start<span class="token punctuation">(</span></span>done<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


  <span class="token function">it<span class="token punctuation">(</span></span><span class="token string">'Demo test GitHub'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    browser
      <span class="token punctuation">.</span><span class="token function">url<span class="token punctuation">(</span></span><span class="token string">'https://github.com/nightwatchjs/nightwatch'</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">waitForElementVisible<span class="token punctuation">(</span></span><span class="token string">'body'</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">title<span class="token punctuation">(</span></span><span class="token string">'nightwatchjs/nightwatch · GitHub'</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">waitForElementVisible<span class="token punctuation">(</span></span><span class="token string">'body'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">visible<span class="token punctuation">(</span></span><span class="token string">'.container .breadcrumb a span'</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">containsText<span class="token punctuation">(</span></span><span class="token string">'.container .breadcrumb a span'</span><span class="token punctuation">,</span> <span class="token string">'nightwatch'</span><span class="token punctuation">,</span> <span class="token string">'Checking project title is set to nightwatch'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    client<span class="token punctuation">.</span><span class="token function">start<span class="token punctuation">(</span></span>done<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">afterEach<span class="token punctuation">(</span></span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    browser<span class="token punctuation">.</span><span class="token function">perform<span class="token punctuation">(</span></span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log<span class="token punctuation">(</span></span><span class="token string">'afterEach'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">after<span class="token punctuation">(</span></span><span class="token keyword">function</span><span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    browser<span class="token punctuation">.</span><span class="token function">end<span class="token punctuation">(</span></span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log<span class="token punctuation">(</span></span><span class="token string">'afterAll'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    client<span class="token punctuation">.</span><span class="token function">start<span class="token punctuation">(</span></span>done<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre>
</div>

</div>

<div class="docs-section">
  <div class="page-header">
    <h2 id="page-objects">Working with Page Objects</h2>
  </div>

  <h3 id="using-page-objects">Using Page Objects</h3>
<p>The Page Objects methodology is a popular pattern to write end-to-end tests by wrapping the pages or page fragments of a web app into objects.
The purpose of a page object is to allow a software client to do anything and see anything that a human can by abstracting away the underlying html actions needed to access and manipulate the page.</p>
<p>A comprehensive introduction to Page Objects can be found in <a href="http://martinfowler.com/bliki/PageObject.html" target="_blank">this article</a>.</p>
<div class="alert alert-info">
As of version <code>0.7</code> Nightwatch provides an enhanced and more powerful interface for creating page objects, significantly improved over the previous support. Page objects created prior to <code>v0.7</code> will still continue to work however we recommend upgrading to the new version.

To use the new version, your page object must contain either the <code>elements</code> or <code>sections</code> property. Otherwise, Nightwatch will defer to the old.
</div>


<h4 id="configuring-page-objects">Configuring Page Objects</h4>
<p>To create a page object simply create an object with properties that describe the page. Each page object should be located in a separate file, located in a designated folder. Nightwatch reads the page objects from the folder (or folders) specified in the <code>page_objects_path</code> configuration property.</p>
<p>The <code>page_objects_path</code> property can also be an array of folders, allowing you thus to logically split the page objects into smaller groups.</p>
<h4 id="the-url-property">The Url property</h4>
<p>You can optionally add a <code>url</code> property that designates the page's URL. To navigate to the page, you can call the <code>navigate</code> method on the page object.</p>
<p>The URL will usually be defined as a string:</p>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  url<span class="token punctuation">:</span> <span class="token string">'http://google.com'</span><span class="token punctuation">,</span>
  elements<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
</div>

<p>It can also be a function in case the URL is dynamic. One use case for this is to support different test environments. You can create a function that gets called in the context of the page, thus allowing you to do:</p>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  url<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>api<span class="token punctuation">.</span>launchUrl <span class="token operator">+</span> <span class="token string">'/login'</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  elements<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
</div>


  <h3 id="defining-elements">Defining Elements</h3>
<p>Most of the time, you will want to define elements on your page that your tests will interact with through commands and assertions. This is made simple using the <code>elements</code> property so that all your elements are defined in a single place. Especially in larger integration tests, using <code>elements</code> will go a long way to keep test code DRY.</p>
<p>Switching between css and xpath locate strategies is handled internally so you don't need to call <code>useXpath</code> and <code>useCss</code> in your tests. The default <code>locateStrategy</code> is css but you can also specify xpath:</p>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  elements<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    searchBar<span class="token punctuation">:</span> <span class="token punctuation">{</span> 
      selector<span class="token punctuation">:</span> <span class="token string">'input[type=text]'</span> 
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    submit<span class="token punctuation">:</span> <span class="token punctuation">{</span> 
      selector<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">'//[@name="q"]', 
</span>      locateStrategy<span class="token punctuation">:</span> <span class="token string">'xpath'</span> 
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
</div>

<p><br>
Or if you're creating elements with the same locate strategy as is default, you can use the shorthand:</p>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  elements<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    searchBar<span class="token punctuation">:</span> <span class="token string">'input[type=text]'</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
</div>

<p><br>
Using the <code>elements</code> property allows you to refer to the element by its name with an <em>"@" prefix</em>, rather than selector, when calling element commands and assertions (<code>click</code>, etc).</p>
<p>Optionally, you can define an array of objects:</p>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">var</span> sharedElements <span class="token operator">=</span> <span class="token punctuation">{</span>
  mailLink<span class="token punctuation">:</span> <span class="token string">'a[href*="mail.google.com"]'</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  elements<span class="token punctuation">:</span> <span class="token punctuation">[</span>
    sharedElements<span class="token punctuation">,</span>
    <span class="token punctuation">{</span> searchBar<span class="token punctuation">:</span> <span class="token string">'input[type=text]'</span> <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
</div>

<p><br>
Putting <code>elements</code> and <code>url</code> together, say you have the following defined above saved as a <code>google.js</code> file:</p>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  url<span class="token punctuation">:</span> <span class="token string">'http://google.com'</span><span class="token punctuation">,</span>
  elements<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    searchBar<span class="token punctuation">:</span> <span class="token punctuation">{</span> 
      selector<span class="token punctuation">:</span> <span class="token string">'input[type=text]'</span> 
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    submit<span class="token punctuation">:</span> <span class="token punctuation">{</span> 
      selector<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">'//[@name="q"]', 
</span>      locateStrategy<span class="token punctuation">:</span> <span class="token string">'xpath'</span> 
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
</div>

<p><br>
In your tests you will use it as follows:</p>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string">'Test'</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>client<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> google <span class="token operator">=</span> client<span class="token punctuation">.</span>page<span class="token punctuation">.</span><span class="token function">google<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    google<span class="token punctuation">.</span><span class="token function">navigate<span class="token punctuation">(</span></span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">title<span class="token punctuation">(</span></span><span class="token string">'Google'</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">visible<span class="token punctuation">(</span></span><span class="token string">'@searchBar'</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">setValue<span class="token punctuation">(</span></span><span class="token string">'@searchBar'</span><span class="token punctuation">,</span> <span class="token string">'nightwatch'</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">click<span class="token punctuation">(</span></span><span class="token string">'@submit'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    client<span class="token punctuation">.</span><span class="token function">end<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
</div>
  <h3 id="defining-sections">Defining Sections</h3>
<p>Sometimes it is useful to define sections of a page. Sections do 2 things:</p>
<ul>
<li>Provide a level of namespacing under the page</li>
<li>Provide element-level nesting so that any element defined within a section is a descendant of its parent section in the DOM</li>
</ul>
<p>You can create sections using the <code>sections</code> property:</p>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  sections<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    menu<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      selector<span class="token punctuation">:</span> <span class="token string">'#gb'</span><span class="token punctuation">,</span>
      elements<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        mail<span class="token punctuation">:</span> <span class="token punctuation">{</span> 
          selector<span class="token punctuation">:</span> <span class="token string">'a[href="mail"]'</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        images<span class="token punctuation">:</span> <span class="token punctuation">{</span>
          selector<span class="token punctuation">:</span> <span class="token string">'a[href="imghp"]'</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
</div>

<p><br>
Your tests would use it as follows:</p>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string">'Test'</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>client<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> google <span class="token operator">=</span> client<span class="token punctuation">.</span>page<span class="token punctuation">.</span><span class="token function">google<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    google<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">section<span class="token punctuation">(</span></span><span class="token string">'@menu'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span>visible<span class="token punctuation">;</span>

    <span class="token keyword">var</span> menuSection <span class="token operator">=</span> google<span class="token punctuation">.</span>section<span class="token punctuation">.</span>menu<span class="token punctuation">;</span>
    menuSection<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'@mail'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span>visible<span class="token punctuation">;</span>
    menuSection<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'@images'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span>visible<span class="token punctuation">;</span>

    menuSection<span class="token punctuation">.</span><span class="token function">click<span class="token punctuation">(</span></span><span class="token string">'@mail'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    client<span class="token punctuation">.</span><span class="token function">end<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
</div>

<p><br></p>
<div class="alert alert-info">
Note that every command and assertion on a section (other than <code>expect</code> assertions) returns that section for chaining. If desired, you can nest sections under other sections for complex DOM structures.
</div>

  <h3 id="writing-commands">Writing Commands</h3>
<p>You can add commands to your page object using the <code>commands</code> property. This is a useful way to encapsulate logic about the page that would otherwise live in a test, or multiple tests.</p>
<p>Nightwatch will call the command on the context of the page or section. Client commands like <code>pause</code> are available via <code>this.api</code>. For chaining, each function should return the page object or section.</p>
<p>In this case, a command is used to encapsulate logic for clicking the submit button:</p>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">var</span> googleCommands <span class="token operator">=</span> <span class="token punctuation">{</span>
  submit<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>api<span class="token punctuation">.</span><span class="token function">pause<span class="token punctuation">(</span></span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">waitForElementVisible<span class="token punctuation">(</span></span><span class="token string">'@submitButton'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">click<span class="token punctuation">(</span></span><span class="token string">'@submitButton'</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">waitForElementNotPresent<span class="token punctuation">(</span></span><span class="token string">'@submitButton'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  commands<span class="token punctuation">:</span> <span class="token punctuation">[</span>googleCommands<span class="token punctuation">]</span><span class="token punctuation">,</span>
  elements<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    searchBar<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      selector<span class="token punctuation">:</span> <span class="token string">'input[type=text]'</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    submitButton<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      selector<span class="token punctuation">:</span> <span class="token string">'button[name=btnG]'</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
</div>

<p><br>
Then the test is simply:</p>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string">'Test'</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>client<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> google <span class="token operator">=</span> client<span class="token punctuation">.</span>page<span class="token punctuation">.</span><span class="token function">google<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    google<span class="token punctuation">.</span><span class="token function">setValue<span class="token punctuation">(</span></span><span class="token string">'@searchBar'</span><span class="token punctuation">,</span> <span class="token string">'nightwatch'</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">submit<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    client<span class="token punctuation">.</span><span class="token function">end<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
</div>

</div>

<div class="docs-section">
  <div class="page-header">
    <h2 id="extending">Extending Nightwatch</h2>
  </div>
<h3 id="writing-custom-commands">Writing Custom Commands</h3>
<p>Most of the time you will need to extend the Nightwatch commands to suit your own application needs. Doing that is only a matter of creating a separate folder and defining your commands in that folder, each one inside its own file.</p>
<p>Then specify the path to that folder inside the <code>nightwatch.json</code> file, as the <code>custom_commands_path</code> property. The command name is the name of the file itself, and it needs to follow the following pattern:</p>
<div class="sample-test" style="width: 500px">
<pre class=" language-javascript" data-language="javascript"><code class=" language-javascript">
exports<span class="token punctuation">.</span>command <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">,</span> imageData<span class="token punctuation">,</span> fs <span class="token operator">=</span> <span class="token function">require<span class="token punctuation">(</span></span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> originalData <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync<span class="token punctuation">(</span></span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> base64Image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Buffer</span><span class="token punctuation">(</span>originalData<span class="token punctuation">,</span> <span class="token string">'binary'</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">toString<span class="token punctuation">(</span></span><span class="token string">'base64'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    imageData <span class="token operator">=</span> <span class="token string">'data:image/jpeg;base64,'</span> <span class="token operator">+</span> base64Image<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log<span class="token punctuation">(</span></span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">throw</span> <span class="token string">"Unable to open file: "</span> <span class="token operator">+</span> file<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">execute<span class="token punctuation">(</span></span>
    <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true"> // execute application specific code
</span>      App<span class="token punctuation">.</span><span class="token function">resizePicture<span class="token punctuation">(</span></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token punctuation">[</span>imageData<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true"> // arguments array to be passed
</span>
    <span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> callback <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        callback<span class="token punctuation">.</span><span class="token function">call<span class="token punctuation">(</span></span>self<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"> // allows the command to be chained.
</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code>
</pre>
</div>

<p>The example below defines a command (e.g. resizePicture.js) which loads an image file as <code>data-URI</code> and calls a method named <code>resizePicture</code> defined inside the application.</p>
<p>With this command, the test will look something like:</p>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string">"testing resize picture"</span> <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    browser
      <span class="token punctuation">.</span><span class="token function">url<span class="token punctuation">(</span></span><span class="token string">"http://app.host"</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">waitForElementVisible<span class="token punctuation">(</span></span><span class="token string">"body"</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">resizePicture<span class="token punctuation">(</span></span><span class="token string">"/var/www/pics/moon.jpg"</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">".container .picture-large"</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">end<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
</div>
<h3 id="writing-custom-assertions">Writing Custom Assertions</h3>
<p>Nightwatch allows you to even define your own assertions, extending the available <code>.assert</code> and <code>.verify</code> namespaces.</p>
<p>Beginning with v0.4 assertions have a very simple interface which is shared between built-in assertions and custom ones. Therefore, custom assertions must implement the following interface:</p>
<div class="sample-test" style="width: 500px">

<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
exports<span class="token punctuation">.</span>assertion <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token comment" spellcheck="true">/**
   * The message which will be used in the test output and
   * inside the XML reports
   * @type {string}
   */</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">;</span>

  <span class="token comment" spellcheck="true">/**
   * A value to perform the assertion on. If a function is
   * defined, its result will be used.
   * @type {function|*}
   */</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>expected<span class="token punctuation">;</span>

  <span class="token comment" spellcheck="true">/**
   * The method which performs the actual assertion. It is
   * called with the result of the value method as the argument.
   * @type {function}
   */</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>pass <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment" spellcheck="true">/**
   * The method which returns the value to be used on the
   * assertion. It is called with the result of the command's
   * callback as argument.
   * @type {function}
   */</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment" spellcheck="true">/**
   * Performs a protocol command/action and its result is
   * passed to the value method via the callback argument.
   * @type {function}
   */</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>command <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>

</div>

<p class="alert alert-success">Both custom assertions and custom commands inherit from <a href="http://nodejs.org/api/events.html" target="_blank">EventEmitter</a> if defined in the form above.<br>
If, however, your command/assertion is defined in the constructor style, then you must inherit manually, similarly to the <a href="https://github.com/beatfactor/nightwatch/blob/master/lib/api/client-commands/pause.js" target="_blank">pause command</a>.</p>

<p class="alert alert-info">To see some examples, check the assertions module source-code on Github:<br><a href="https://github.com/beatfactor/nightwatch/tree/master/lib/api/assertions" target="_blank">/nightwatch/tree/master/lib/selenium/assertions</a></p>

<h3 id="custom-reporter">Custom Reporter</h3>
<p>If you'd like to define your own reporter in addition to the built-in ones (stdout and junit-xml) you can do so in two ways:</p>
<h4 id="the-reporter-command-line-argument">The <code>--reporter</code> command-line argument</h4>
<h5 id="interface-">Interface:</h5>
<div class="sample-test">
<pre class=" language-javascript"><code class=" language-javascript">
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  write <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>results<span class="token punctuation">,</span> options<span class="token punctuation">,</span> done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">done<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
</div>

<h4 id="the-reporter-method-in-your-external-globals-file-">The <code>reporter</code> method in your external <code>globals</code> file.</h4>
<p>See the provided <a href="https://github.com/beatfactor/nightwatch/blob/master/examples/globalsModule.js">globalsModule.js</a> for an example.</p>
<h4 id="example-">Example:</h4>
<div class="sample-test">
<pre class=" language-javascript"><code class=" language-javascript">
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  reporter <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>results<span class="token punctuation">,</span> done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log<span class="token punctuation">(</span></span>results<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">done<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
</div>

</div>

<div class="docs-section">
  <div class="page-header">
    <h2 id="unit-testing">Unit Testing with Nightwatch</h2>
  </div>

  <h3 id="writing-unit-tests">Writing Unit Tests</h3>
<p>Unit testing in Nightwatch has been refined in version <code>0.9</code>. Unit tests now written in Nightwatch are also fully compatible with <a href="https://mochajs.org/#exports">Mocha's Exports</a> interface, so you can use either test runners. In fact, all Nightwatch's unit tests have been rewritten so they can be ran with either Nightwatch or Mocha.</p>
<div class="alert alert-info">
For backwards compatibility reasons, to take advantage of the improved unit testing support you need to set the toggle setting <code>compatible_testcase_support</code> to <code>true</code> in your test settings.
</div>

<p>Unit tests written in versions prior to <code>0.9</code> will still continue to work however we recommend upgrading them.</p>
<h4 id="disabling-automatic-selenium-session">Disabling automatic selenium session</h4>
<p>Nightwatch automatically attempts to connect to the specified selenium server and create a session.
When running unit tests this needs to be disabled by setting the <code>start_session</code> property to <code>false</code> inside the <code>selenium</code> settings group either on the root level or inside a specific environment.</p>
<h4 id="assertion-framework">Assertion framework</h4>
<p>Starting with <code>0.9</code>, in the improved support for unit tests, the <code>client</code> object is no longer passed as an argument to the test. The only argument passed now is the <code>done</code> callback to be used for asynchronous tests.</p>
<p>You can use whatever assertion framework you like. <a href="http://chaijs.com/">Chai.js</a> is quite a good one and very flexible. We use the internal Node.js <code>assert</code> module in the Nightwatch unit tests.</p>
<p>You can still refer the <code>client</code> object via <code>this.client</code> in your tests.</p>
<h4 id="example">Example</h4>
<p>Here's a subset of the unit test for the <code>utils.js</code> Nightwatch module:</p>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">var</span> assert <span class="token operator">=</span> <span class="token function">require<span class="token punctuation">(</span></span><span class="token string">'assert'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> common <span class="token operator">=</span> <span class="token function">require<span class="token punctuation">(</span></span><span class="token string">'../../common.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> Utils <span class="token operator">=</span> common<span class="token punctuation">.</span><span class="token function">require<span class="token punctuation">(</span></span><span class="token string">'util/utils.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string">'test Utils'</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>
    testFormatElapsedTime <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

      <span class="token keyword">var</span> resultMs <span class="token operator">=</span> Utils<span class="token punctuation">.</span><span class="token function">formatElapsedTime<span class="token punctuation">(</span></span><span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      assert<span class="token punctuation">.</span><span class="token function">equal<span class="token punctuation">(</span></span>resultMs<span class="token punctuation">,</span> <span class="token string">'999ms'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">var</span> resultSec <span class="token operator">=</span> Utils<span class="token punctuation">.</span><span class="token function">formatElapsedTime<span class="token punctuation">(</span></span><span class="token number">1999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      assert<span class="token punctuation">.</span><span class="token function">equal<span class="token punctuation">(</span></span>resultSec<span class="token punctuation">,</span> <span class="token string">'1.999s'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">var</span> resultMin <span class="token operator">=</span> Utils<span class="token punctuation">.</span><span class="token function">formatElapsedTime<span class="token punctuation">(</span></span><span class="token number">122299</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      assert<span class="token punctuation">.</span><span class="token function">equal<span class="token punctuation">(</span></span>resultMin<span class="token punctuation">,</span> <span class="token string">'2m 2s / 122299ms'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    testMakeFnAsync <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">function</span> <span class="token function">asyncFn<span class="token punctuation">(</span></span>cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">cb<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">function</span> <span class="token function">syncFn<span class="token punctuation">(</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

      <span class="token keyword">var</span> convertedFn <span class="token operator">=</span> Utils<span class="token punctuation">.</span><span class="token function">makeFnAsync<span class="token punctuation">(</span></span><span class="token number">1</span><span class="token punctuation">,</span> syncFn<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">var</span> called <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token function">convertedFn<span class="token punctuation">(</span></span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        called <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      assert<span class="token punctuation">.</span><span class="token function">equal<span class="token punctuation">(</span></span>Utils<span class="token punctuation">.</span><span class="token function">makeFnAsync<span class="token punctuation">(</span></span><span class="token number">1</span><span class="token punctuation">,</span> asyncFn<span class="token punctuation">)</span><span class="token punctuation">,</span> asyncFn<span class="token punctuation">)</span><span class="token punctuation">;</span>
      assert<span class="token punctuation">.</span><span class="token function">ok<span class="token punctuation">(</span></span>called<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre>
</div>

  <h3 id="asynchronous-unit-tests">Asynchronous Unit Tests</h3>
<p>The argument to the test function is the optional <code>done</code> callback which signals the test is complete.
If present, the callback must be called when the async operation finishes.</p>
<h4 id="example">Example</h4>
<p>Here's unit test which checks if Nightwatch throws an error if you don't invoke the <code>done</code> callback within a set time (10 ms).</p>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require<span class="token punctuation">(</span></span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> assert <span class="token operator">=</span> <span class="token function">require<span class="token punctuation">(</span></span><span class="token string">'assert'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> common <span class="token operator">=</span> <span class="token function">require<span class="token punctuation">(</span></span><span class="token string">'../../common.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> CommandGlobals <span class="token operator">=</span> <span class="token function">require<span class="token punctuation">(</span></span><span class="token string">'../../lib/globals/commands.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> Runner <span class="token operator">=</span> common<span class="token punctuation">.</span><span class="token function">require<span class="token punctuation">(</span></span><span class="token string">'runner/run.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">'testRunner'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
      before<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        CommandGlobals<span class="token punctuation">.</span>beforeEach<span class="token punctuation">.</span><span class="token function">call<span class="token punctuation">(</span></span><span class="token keyword">this</span><span class="token punctuation">,</span> done<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>

      after<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        CommandGlobals<span class="token punctuation">.</span>afterEach<span class="token punctuation">.</span><span class="token function">call<span class="token punctuation">(</span></span><span class="token keyword">this</span><span class="token punctuation">,</span> done<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>

      beforeEach<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        process<span class="token punctuation">.</span><span class="token function">removeAllListeners<span class="token punctuation">(</span></span><span class="token string">'exit'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        process<span class="token punctuation">.</span><span class="token function">removeAllListeners<span class="token punctuation">(</span></span><span class="token string">'uncaughtException'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>

      <span class="token string">'test async unit test with timeout error'</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> testsPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join<span class="token punctuation">(</span></span>__dirname<span class="token punctuation">,</span> <span class="token string">'../../asynchookstests/unittest-async-timeout.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> globals <span class="token operator">=</span> <span class="token punctuation">{</span>
          calls <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
          asyncHookTimeout<span class="token punctuation">:</span> <span class="token number">10</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        process<span class="token punctuation">.</span><span class="token function">on<span class="token punctuation">(</span></span><span class="token string">'uncaughtException'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          assert<span class="token punctuation">.</span><span class="token function">ok<span class="token punctuation">(</span></span>err <span class="token keyword">instanceof</span> <span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          assert<span class="token punctuation">.</span><span class="token function">equal<span class="token punctuation">(</span></span>err<span class="token punctuation">.</span>message<span class="token punctuation">,</span> <span class="token string">'done() callback timeout of 10 ms was reached while executing "demoTest". '</span> <span class="token operator">+</span>
            <span class="token string">'Make sure to call the done() callback when the operation finishes.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

          <span class="token function">done<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">var</span> runner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runner</span><span class="token punctuation">(</span><span class="token punctuation">[</span>testsPath<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
          seleniumPort<span class="token punctuation">:</span> <span class="token number">10195</span><span class="token punctuation">,</span>
          silent<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
          output<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
          persist_globals <span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
          globals<span class="token punctuation">:</span> globals<span class="token punctuation">,</span>
          compatible_testcase_support <span class="token punctuation">:</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
          output_folder <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
          start_session <span class="token punctuation">:</span> <span class="token boolean">false</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        runner<span class="token punctuation">.</span><span class="token function">run<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">done<span class="token punctuation">(</span></span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
</div>

<p>The complete test suite can be viewed on GitHub:
<a href="https://github.com/nightwatchjs/nightwatch/tree/master/test/src/runner/testRunner.js">https://github.com/nightwatchjs/nightwatch/tree/master/test/src/runner/testRunner.js</a></p>

  <h3 id="running-the-nightwatch-unit-tests">Running the Nightwatch unit tests</h3>
<p>To get an idea of how running unit tests with Nightwatch works you can head over to our <a href="https://github.com/nightwatchjs/nightwatch">GitHub page</a>, clone the project and follow the instructions on how to run the tests.</p>
<p>You can also check out Nightwatch's own complete test suite for examples:
<a href="https://github.com/nightwatchjs/nightwatch/tree/master/test/src">https://github.com/nightwatchjs/nightwatch/tree/master/test/src</a></p>
<p>Here's the configuration needed to run them:</p>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token punctuation">{</span>
  <span class="token string">"src_folders"</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"./test/src"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string">"selenium"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">"start_process"</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token string">"start_session"</span> <span class="token punctuation">:</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token string">"test_settings"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">"default"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token string">"filter"</span> <span class="token punctuation">:</span> <span class="token string">"*/.js"</span><span class="token punctuation">,</span>
      <span class="token string">"compatible_testcase_support"</span> <span class="token punctuation">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
</div>

  <h3 id="using-a-combined-configuration">Using a Combined Configuration</h3>
<p>Below it's an example of how you can combine end-to-end tests and unit tests in the same <code>nightwatch.json</code> configuration file.
Notice the usage of <code>exclude</code> and <code>filter</code> properties.</p>
<p>An empty <code>exclude</code> means we want to reset its value and rely only on <code>filter</code>.</p>
<pre class=" language-javascript"><code class=" language-javascript"><span class="token punctuation">{</span>
  <span class="token string">"src_folders"</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"./examples/tests"</span><span class="token punctuation">,</span> <span class="token string">"./examples/unittests"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string">"output_folder"</span> <span class="token punctuation">:</span> <span class="token string">"./examples/reports"</span><span class="token punctuation">,</span>

  <span class="token string">"selenium"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">"start_process"</span> <span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token string">"server_path"</span> <span class="token punctuation">:</span> <span class="token string">"./bin/selenium-server-standalone.jar"</span><span class="token punctuation">,</span>
    <span class="token string">"log_path"</span> <span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
    <span class="token string">"host"</span> <span class="token punctuation">:</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>
    <span class="token string">"port"</span> <span class="token punctuation">:</span> <span class="token number">4444</span><span class="token punctuation">,</span>
    <span class="token string">"cli_args"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token string">"webdriver.chrome.driver"</span> <span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
      <span class="token string">"webdriver.ie.driver"</span> <span class="token punctuation">:</span> <span class="token string">""</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token string">"test_settings"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">"default"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token string">"launch_url"</span> <span class="token punctuation">:</span> <span class="token string">"http://localhost"</span><span class="token punctuation">,</span>
      <span class="token string">"selenium_port"</span>  <span class="token punctuation">:</span> <span class="token number">4444</span><span class="token punctuation">,</span>
      <span class="token string">"selenium_host"</span>  <span class="token punctuation">:</span> <span class="token string">"localhost"</span><span class="token punctuation">,</span>
      <span class="token string">"silent"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token string">"screenshots"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">"enabled"</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token string">"path"</span> <span class="token punctuation">:</span> <span class="token string">""</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token string">"desiredCapabilities"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">"browserName"</span><span class="token punctuation">:</span> <span class="token string">"firefox"</span><span class="token punctuation">,</span>
        <span class="token string">"javascriptEnabled"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token string">"acceptSslCerts"</span><span class="token punctuation">:</span> <span class="token boolean">true</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token string">"exclude"</span> <span class="token punctuation">:</span> <span class="token string">"./examples/unittests/*"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token string">"unittests"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token string">"selenium"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">"start_process"</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token string">"start_session"</span> <span class="token punctuation">:</span> <span class="token boolean">false</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token string">"filter"</span> <span class="token punctuation">:</span> <span class="token string">"./examples/unittests/*"</span><span class="token punctuation">,</span>
      <span class="token string">"exclude"</span> <span class="token punctuation">:</span> <span class="token string">""</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
  <h3 id="code-coverage">Code Coverage</h3>
<p>At the moment, Nightwatch doesn't provide a coverage reporter but it is something that's being planned for a future release.
In the meantime you can write a custom reporter which will output coverage data. See the <a href="http://local.nightwatchjs.org/guide#custom-reporter">custom reporter</a> section for details and the <a href="http://mochajs.org/#htmlcov">Mocha HTMLCov</a> reporter for how the reporter should look like.</p>
<h4 id="3rd-party-coverage-service">3rd party coverage service</h4>
<p>There are some hosted services which provide the reporting and metrics for you in a modern web interface. These services will typically require coverage data in LCOV format. Nightwatch uses <a href="https://coveralls.io/github/nightwatchjs/nightwatch?branch=master">coveralls.io</a>.</p>
<p>For details on how an LCOV reporter should look like and how to integrate with your project, you can check out the <a href="https://www.npmjs.com/package/mocha-lcov-reporter">mocha-lcov-reporter</a>.</p>

</div>
      </div>
  </div>
  </div>
    <br><br>
  </section>

  <section id="api-container" data-page-uri="/api" class="secondary">
<div class="jumbotron">
  <div class="container">
    <h1>API Reference</h1>
  </div>
</div>

<div class="container bs-docs-container">
  <div class="row">
  <div class="col-md-3">
    <div class="bs-sidebar hidden-print affix" role="complementary">

      <ul class="nav bs-sidenav">
        <li class="active">
          <a href="http://nightwatchjs.org/api#expect-api">Expect</a>
          <ul class="nav">
            <li class=""><a href="http://nightwatchjs.org/api#expect-chains">language chains</a></li>
            <li class=""><a href="http://nightwatchjs.org/api#expect-matchers">equal / contain / match</a></li>
            <li class=""><a href="http://nightwatchjs.org/api#expect-negation">not</a></li>
            <li class=""><a href="http://nightwatchjs.org/api#expect-before">before / after</a></li>
            
            <li class=""><a href="http://nightwatchjs.org/api#expect-a">a / an</a></li>
            
            <li class=""><a href="http://nightwatchjs.org/api#expect-attribute">attribute</a></li>
            
            <li class=""><a href="http://nightwatchjs.org/api#expect-css">css</a></li>
            
            <li class=""><a href="http://nightwatchjs.org/api#expect-enabled">enabled</a></li>
            
            <li class=""><a href="http://nightwatchjs.org/api#expect-present">present</a></li>
            
            <li class=""><a href="http://nightwatchjs.org/api#expect-selected">selected</a></li>
            
            <li class="active"><a href="http://nightwatchjs.org/api#expect-text">text</a></li>
            
            <li class=""><a href="http://nightwatchjs.org/api#expect-value">value</a></li>
            
            <li class=""><a href="http://nightwatchjs.org/api#expect-visible">visible</a></li>
            
          </ul>
        </li>
        <li class="">
          <a href="http://nightwatchjs.org/api#assertions">Assert</a>
          <ul class="nav">
          
            <li class=""><a href="http://nightwatchjs.org/api#assert-attributeContains">attributeContains</a></li>
          
            <li class=""><a href="http://nightwatchjs.org/api#assert-attributeEquals">attributeEquals</a></li>
          
            <li class=""><a href="http://nightwatchjs.org/api#assert-containsText">containsText</a></li>
          
            <li class=""><a href="http://nightwatchjs.org/api#assert-cssClassPresent">cssClassPresent</a></li>
          
            <li class=""><a href="http://nightwatchjs.org/api#assert-cssClassNotPresent">cssClassNotPresent</a></li>
          
            <li class=""><a href="http://nightwatchjs.org/api#assert-cssProperty">cssProperty</a></li>
          
            <li class=""><a href="http://nightwatchjs.org/api#assert-elementPresent">elementPresent</a></li>
          
            <li class=""><a href="http://nightwatchjs.org/api#assert-elementNotPresent">elementNotPresent</a></li>
          
            <li class=""><a href="http://nightwatchjs.org/api#assert-hidden">hidden</a></li>
          
            <li class=""><a href="http://nightwatchjs.org/api#assert-title">title</a></li>
          
            <li class=""><a href="http://nightwatchjs.org/api#assert-urlContains">urlContains</a></li>
          
            <li><a href="http://nightwatchjs.org/api#assert-urlEquals">urlEquals</a></li>
          
            <li class=""><a href="http://nightwatchjs.org/api#assert-value">value</a></li>
          
            <li class=""><a href="http://nightwatchjs.org/api#assert-valueContains">valueContains</a></li>
          
            <li class=""><a href="http://nightwatchjs.org/api#assert-visible">visible</a></li>
          
          </ul>
        </li>

        <li class="">
          <a href="http://nightwatchjs.org/api#commands">Commands</a>
          <ul class="nav">
            
              <li><a href="http://nightwatchjs.org/api#clearValue">clearValue</a></li>
            
              <li><a href="http://nightwatchjs.org/api#click">click</a></li>
            
              <li><a href="http://nightwatchjs.org/api#closeWindow">closeWindow</a></li>
            
              <li><a href="http://nightwatchjs.org/api#deleteCookie">deleteCookie</a></li>
            
              <li><a href="http://nightwatchjs.org/api#deleteCookies">deleteCookies</a></li>
            
              <li><a href="http://nightwatchjs.org/api#end">end</a></li>
            
              <li><a href="http://nightwatchjs.org/api#getAttribute">getAttribute</a></li>
            
              <li><a href="http://nightwatchjs.org/api#getCookie">getCookie</a></li>
            
              <li><a href="http://nightwatchjs.org/api#getCookies">getCookies</a></li>
            
              <li><a href="http://nightwatchjs.org/api#getCssProperty">getCssProperty</a></li>
            
              <li><a href="http://nightwatchjs.org/api#getElementSize">getElementSize</a></li>
            
              <li><a href="http://nightwatchjs.org/api#getLocation">getLocation</a></li>
            
              <li><a href="http://nightwatchjs.org/api#getLocationInView">getLocationInView</a></li>
            
              <li><a href="http://nightwatchjs.org/api#getLog">getLog</a></li>
            
              <li><a href="http://nightwatchjs.org/api#getLogTypes">getLogTypes</a></li>
            
              <li class=""><a href="http://nightwatchjs.org/api#getTagName">getTagName</a></li>
            
              <li class=""><a href="http://nightwatchjs.org/api#getText">getText</a></li>
            
              <li class=""><a href="http://nightwatchjs.org/api#getTitle">getTitle</a></li>
            
              <li class=""><a href="http://nightwatchjs.org/api#getValue">getValue</a></li>
            
              <li><a href="http://nightwatchjs.org/api#init">init</a></li>
            
              <li><a href="http://nightwatchjs.org/api#injectScript">injectScript</a></li>
            
              <li><a href="http://nightwatchjs.org/api#isLogAvailable">isLogAvailable</a></li>
            
              <li><a href="http://nightwatchjs.org/api#isVisible">isVisible</a></li>
            
              <li><a href="http://nightwatchjs.org/api#maximizeWindow">maximizeWindow</a></li>
            
              <li><a href="http://nightwatchjs.org/api#moveToElement">moveToElement</a></li>
            
              <li><a href="http://nightwatchjs.org/api#pause">pause</a></li>
            
              <li><a href="http://nightwatchjs.org/api#perform">perform</a></li>
            
              <li><a href="http://nightwatchjs.org/api#resizeWindow">resizeWindow</a></li>
            
              <li><a href="http://nightwatchjs.org/api#saveScreenshot">saveScreenshot</a></li>
            
              <li><a href="http://nightwatchjs.org/api#setCookie">setCookie</a></li>
            
              <li><a href="http://nightwatchjs.org/api#setValue">setValue</a></li>
            
              <li><a href="http://nightwatchjs.org/api#setWindowPosition">setWindowPosition</a></li>
            
              <li><a href="http://nightwatchjs.org/api#submitForm">submitForm</a></li>
            
              <li><a href="http://nightwatchjs.org/api#switchWindow">switchWindow</a></li>
            
              <li><a href="http://nightwatchjs.org/api#urlHash">urlHash</a></li>
            
              <li><a href="http://nightwatchjs.org/api#waitForElementNotPresent">waitForElementNotPresent</a></li>
            
              <li><a href="http://nightwatchjs.org/api#waitForElementNotVisible">waitForElementNotVisible</a></li>
            
              <li><a href="http://nightwatchjs.org/api#waitForElementPresent">waitForElementPresent</a></li>
            
              <li><a href="http://nightwatchjs.org/api#waitForElementVisible">waitForElementVisible</a></li>
            
          </ul>
        </li>

        <li>
          <a href="http://nightwatchjs.org/api#protocol">Selenium Protocol</a>
          <ul class="nav">
            
              <li><a href="http://nightwatchjs.org/api#acceptAlert">acceptAlert</a></li>
            
              <li><a href="http://nightwatchjs.org/api#back">back</a></li>
            
              <li><a href="http://nightwatchjs.org/api#contexts">contexts</a></li>
            
              <li><a href="http://nightwatchjs.org/api#cookie">cookie</a></li>
            
              <li><a href="http://nightwatchjs.org/api#currentContext">currentContext</a></li>
            
              <li><a href="http://nightwatchjs.org/api#dismissAlert">dismissAlert</a></li>
            
              <li><a href="http://nightwatchjs.org/api#doubleClick">doubleClick</a></li>
            
              <li><a href="http://nightwatchjs.org/api#element">element</a></li>
            
              <li><a href="http://nightwatchjs.org/api#elementActive">elementActive</a></li>
            
              <li><a href="http://nightwatchjs.org/api#elementIdAttribute">elementIdAttribute</a></li>
            
              <li><a href="http://nightwatchjs.org/api#elementIdClear">elementIdClear</a></li>
            
              <li><a href="http://nightwatchjs.org/api#elementIdClick">elementIdClick</a></li>
            
              <li><a href="http://nightwatchjs.org/api#elementIdCssProperty">elementIdCssProperty</a></li>
            
              <li><a href="http://nightwatchjs.org/api#elementIdDisplayed">elementIdDisplayed</a></li>
            
              <li><a href="http://nightwatchjs.org/api#elementIdElement">elementIdElement</a></li>
            
              <li><a href="http://nightwatchjs.org/api#elementIdElements">elementIdElements</a></li>
            
              <li><a href="http://nightwatchjs.org/api#elementIdEnabled">elementIdEnabled</a></li>
            
              <li><a href="http://nightwatchjs.org/api#elementIdEquals">elementIdEquals</a></li>
            
              <li><a href="http://nightwatchjs.org/api#elementIdLocation">elementIdLocation</a></li>
            
              <li><a href="http://nightwatchjs.org/api#elementIdLocationInView">elementIdLocationInView</a></li>
            
              <li><a href="http://nightwatchjs.org/api#elementIdName">elementIdName</a></li>
            
              <li><a href="http://nightwatchjs.org/api#elementIdSelected">elementIdSelected</a></li>
            
              <li><a href="http://nightwatchjs.org/api#elementIdSize">elementIdSize</a></li>
            
              <li><a href="http://nightwatchjs.org/api#elementIdText">elementIdText</a></li>
            
              <li><a href="http://nightwatchjs.org/api#elementIdValue">elementIdValue</a></li>
            
              <li><a href="http://nightwatchjs.org/api#elements">elements</a></li>
            
              <li><a href="http://nightwatchjs.org/api#execute">execute</a></li>
            
              <li><a href="http://nightwatchjs.org/api#executeAsync">executeAsync</a></li>
            
              <li><a href="http://nightwatchjs.org/api#forward">forward</a></li>
            
              <li><a href="http://nightwatchjs.org/api#frame">frame</a></li>
            
              <li><a href="http://nightwatchjs.org/api#frameParent">frameParent</a></li>
            
              <li><a href="http://nightwatchjs.org/api#getAlertText">getAlertText</a></li>
            
              <li><a href="http://nightwatchjs.org/api#getOrientation">getOrientation</a></li>
            
              <li><a href="http://nightwatchjs.org/api#keys">keys</a></li>
            
              <li><a href="http://nightwatchjs.org/api#mouseButtonClick">mouseButtonClick</a></li>
            
              <li><a href="http://nightwatchjs.org/api#mouseButtonDown">mouseButtonDown</a></li>
            
              <li><a href="http://nightwatchjs.org/api#mouseButtonUp">mouseButtonUp</a></li>
            
              <li><a href="http://nightwatchjs.org/api#moveTo">moveTo</a></li>
            
              <li><a href="http://nightwatchjs.org/api#refresh">refresh</a></li>
            
              <li><a href="http://nightwatchjs.org/api#screenshot">screenshot</a></li>
            
              <li><a href="http://nightwatchjs.org/api#session">session</a></li>
            
              <li><a href="http://nightwatchjs.org/api#sessionLog">sessionLog</a></li>
            
              <li><a href="http://nightwatchjs.org/api#sessionLogTypes">sessionLogTypes</a></li>
            
              <li><a href="http://nightwatchjs.org/api#sessions">sessions</a></li>
            
              <li><a href="http://nightwatchjs.org/api#setAlertText">setAlertText</a></li>
            
              <li><a href="http://nightwatchjs.org/api#setContext">setContext</a></li>
            
              <li><a href="http://nightwatchjs.org/api#setOrientation">setOrientation</a></li>
            
              <li><a href="http://nightwatchjs.org/api#source">source</a></li>
            
              <li><a href="http://nightwatchjs.org/api#status">status</a></li>
            
              <li><a href="http://nightwatchjs.org/api#submit">submit</a></li>
            
              <li><a href="http://nightwatchjs.org/api#timeouts">timeouts</a></li>
            
              <li><a href="http://nightwatchjs.org/api#timeoutsAsyncScript">timeoutsAsyncScript</a></li>
            
              <li><a href="http://nightwatchjs.org/api#timeoutsImplicitWait">timeoutsImplicitWait</a></li>
            
              <li><a href="http://nightwatchjs.org/api#title">title</a></li>
            
              <li><a href="http://nightwatchjs.org/api#url">url</a></li>
            
              <li><a href="http://nightwatchjs.org/api#window">window</a></li>
            
              <li><a href="http://nightwatchjs.org/api#windowHandle">windowHandle</a></li>
            
              <li><a href="http://nightwatchjs.org/api#windowHandles">windowHandles</a></li>
            
              <li><a href="http://nightwatchjs.org/api#windowMaximize">windowMaximize</a></li>
            
              <li><a href="http://nightwatchjs.org/api#windowPosition">windowPosition</a></li>
            
              <li><a href="http://nightwatchjs.org/api#windowSize">windowSize</a></li>
            
          </ul>
        </li>
      </ul>
    </div>
  </div>

<div class="col-md-9" role="main">
  <div class="docs-section">
    <div class="page-header">
      <h2 id="expect-api">Expect</h2>
    </div>
    <br>
    <p>Nightwatch introduces in version <code>0.7</code> a new BDD-style interface for performing assertions on elements, defined on the <code>expect</code> namespace on the main Nightwatch instance. It is based on the <a href="http://chaijs.com/api/bdd/" target="_blank">Chai Expect</a> assertion library and provides a greater level of flexibility and adds new capabilities over the classic <code>assert</code> interface.</p>
    <p>It uses a chainable language to construct assertions given an element specified by a css/xpath selector. A simple example looks like the following:</p>

    <div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token comment" spellcheck="true"> // start with identifying the element
</span> <span class="token comment" spellcheck="true"> // and then assert the element is present
</span>  browser<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'#main'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span>present<span class="token punctuation">;</span>

 <span class="token comment" spellcheck="true"> // or assert the element is visible
</span>  browser<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'#main'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span>visible<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
    </div>


    <div class="apimethod">
      <h3 id="expect-chains"><code>Language Chains</code></h3>
      <p>The following are provided as chainable getters to improve the readability of your assertions. They do not provide testing capabilities and the order is not important.</p>
      <ul>
        <li>to</li>
        <li>be</li>
        <li>been</li>
        <li>is</li>
        <li>that</li>
        <li>which</li>
        <li>and</li>
        <li>has</li>
        <li>have</li>
        <li>with</li>
        <li>at</li>
        <li>does</li>
        <li>of</li>
      </ul>
    </div>

    <div class="apimethod">
      <h3 id="expect-matchers"><code>.equal(value)/.contain(value)/.match(regex)</code></h3>
      <p>These methods will perform assertions on the specified target on the current element. The targets can be an attribute value, the element's inner text and a css property.</p>
      <div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  browser<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'#main'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">equal<span class="token punctuation">(</span></span><span class="token string">'The Night Watch'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  browser<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'#main'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">contain<span class="token punctuation">(</span></span><span class="token string">'The Night Watch'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  browser<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'#main'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">css<span class="token punctuation">(</span></span><span class="token string">'display'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>which<span class="token punctuation">.</span><span class="token function">equals<span class="token punctuation">(</span></span><span class="token string">'block'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
      </div>

    </div>

    <div class="apimethod">
      <h3 id="expect-negation"><code>.not</code></h3>
      <p>Negates any of assertions following in the chain.</p>
      <div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  browser<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'#main'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span>to<span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">equal<span class="token punctuation">(</span></span><span class="token string">'The Night Watch'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  browser<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'#main'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span>to<span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">contain<span class="token punctuation">(</span></span><span class="token string">'The Night Watch'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  browser<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'#main'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">css<span class="token punctuation">(</span></span><span class="token string">'display'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>which<span class="token punctuation">.</span>does<span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">equal<span class="token punctuation">(</span></span><span class="token string">'block'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
      </div>

    </div>

    <div class="apimethod">
      <h3 id="expect-before"><code>.before(ms)/.after(ms)</code></h3>
      <p>These methods perform the same thing which is essentially retrying the assertion for the given amount of time (in milliseconds). <code>before</code> or <code>after</code> can be chained to any assertion and thus adding retry capability.</p>

        <p>You can change the polling interval by defining a <code>waitForConditionPollInterval</code> property (in milliseconds) as a global property in your <code>nightwatch.json</code> or in your external globals file.
        Similarly, a default timeout can be specified as a global <code>waitForConditionTimeout</code> property (in milliseconds).
      </p>
      <div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  browser<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'#main'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">contain<span class="token punctuation">(</span></span><span class="token string">'The Night Watch'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">before<span class="token punctuation">(</span></span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  browser<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'#main'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span>to<span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">contain<span class="token punctuation">(</span></span><span class="token string">'The Night Watch'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">after<span class="token punctuation">(</span></span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
      </div>

    </div>
    <!-- ============================================================
    // Expect
    ============================================================ -->

    <div class="commands">
      
      <div class="apimethod">
        <h3 id="expect-a"><code>.a(type)</code> <span class="since optional">since v0.7</span></h3>

        <p>Checks if the type (i.e. tag name) of a specified element is of an expected value.</p>
        
        <h5>Arguments:</h5>
        <div class="table-responsive">
          <table class="table table-bordered table-striped">
            <thead>
            <tr>
              <th style="width: 100px;">Name</th>
              <th style="width: 100px;">Type</th>
              <th>description</th>
            </tr>
            </thead>
            <tbody>

            
            <tr>
              <td><code>type</code></td>
              <td>string</td>
              <td>The expected type</td>
            </tr>
            
            <tr>
              <td><code>message</code><br><span class="optional">Optional</span></td>
              <td>string</td>
              <td>Optional log message to display in the output. If missing, one is displayed by default.</td>
            </tr>
            
            </tbody>
          </table>
        </div>
        


        
        <h5>Usage:</h5>
        <div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  browser<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'#q'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token function">an<span class="token punctuation">(</span></span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  browser<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'#q'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token function">an<span class="token punctuation">(</span></span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token string">'Testing if #q is an input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  browser<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'#w'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token function">a<span class="token punctuation">(</span></span><span class="token string">'span'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
        </div>
        
      </div>  <!-- end .apimethod -->
      
      <div class="apimethod">
        <h3 id="expect-attribute"><code>.attribute(name)</code> <span class="since optional">since v0.7</span></h3>

        <p>Checks if a given attribute of an element exists and optionally if it has the expected value.</p>
        
        <h5>Arguments:</h5>
        <div class="table-responsive">
          <table class="table table-bordered table-striped">
            <thead>
            <tr>
              <th style="width: 100px;">Name</th>
              <th style="width: 100px;">Type</th>
              <th>description</th>
            </tr>
            </thead>
            <tbody>

            
            <tr>
              <td><code>attribute</code></td>
              <td>string</td>
              <td>The attribute name</td>
            </tr>
            
            <tr>
              <td><code>message</code><br><span class="optional">Optional</span></td>
              <td>string</td>
              <td>Optional log message to display in the output. If missing, one is displayed by default.</td>
            </tr>
            
            </tbody>
          </table>
        </div>
        


        
        <h5>Usage:</h5>
        <div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  browser<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">attribute<span class="token punctuation">(</span></span><span class="token string">'data-attr'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  browser<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>not<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">attribute<span class="token punctuation">(</span></span><span class="token string">'data-attr'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  browser<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>not<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">attribute<span class="token punctuation">(</span></span><span class="token string">'data-attr'</span><span class="token punctuation">,</span> <span class="token string">'Testing if body does not have data-attr'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  browser<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">attribute<span class="token punctuation">(</span></span><span class="token string">'data-attr'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">before<span class="token punctuation">(</span></span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  browser<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">attribute<span class="token punctuation">(</span></span><span class="token string">'data-attr'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">equals<span class="token punctuation">(</span></span><span class="token string">'some attribute'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  browser<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">attribute<span class="token punctuation">(</span></span><span class="token string">'data-attr'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">equals<span class="token punctuation">(</span></span><span class="token string">'other attribute'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  browser<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">attribute<span class="token punctuation">(</span></span><span class="token string">'data-attr'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span>which<span class="token punctuation">.</span><span class="token function">contains<span class="token punctuation">(</span></span><span class="token string">'something'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  browser<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">attribute<span class="token punctuation">(</span></span><span class="token string">'data-attr'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span>which<span class="token punctuation">.</span><span class="token function">matches<span class="token punctuation">(</span></span><span class="token regex">/^something\ else/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
        </div>
        
      </div>  <!-- end .apimethod -->
      
      <div class="apimethod">
        <h3 id="expect-css"><code>.css(property)</code> <span class="since optional">since v0.7</span></h3>

        <p>Checks a given css property of an element exists and optionally if it has the expected value.</p>
        
        <h5>Arguments:</h5>
        <div class="table-responsive">
          <table class="table table-bordered table-striped">
            <thead>
            <tr>
              <th style="width: 100px;">Name</th>
              <th style="width: 100px;">Type</th>
              <th>description</th>
            </tr>
            </thead>
            <tbody>

            
            <tr>
              <td><code>property</code></td>
              <td>string</td>
              <td>The css property name</td>
            </tr>
            
            <tr>
              <td><code>message</code><br><span class="optional">Optional</span></td>
              <td>string</td>
              <td>Optional log message to display in the output. If missing, one is displayed by default.*</td>
            </tr>
            
            </tbody>
          </table>
        </div>
        


        
        <h5>Usage:</h5>
        <div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  browser<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'#main'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">css<span class="token punctuation">(</span></span><span class="token string">'display'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  browser<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'#main'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">css<span class="token punctuation">(</span></span><span class="token string">'display'</span><span class="token punctuation">,</span> <span class="token string">'Testing for display'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  browser<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'#main'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>not<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">css<span class="token punctuation">(</span></span><span class="token string">'display'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  browser<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'#main'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">css<span class="token punctuation">(</span></span><span class="token string">'display'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">before<span class="token punctuation">(</span></span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  browser<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'#main'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">css<span class="token punctuation">(</span></span><span class="token string">'display'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>which<span class="token punctuation">.</span><span class="token function">equals<span class="token punctuation">(</span></span><span class="token string">'block'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  browser<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'#main'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">css<span class="token punctuation">(</span></span><span class="token string">'display'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>which<span class="token punctuation">.</span><span class="token function">contains<span class="token punctuation">(</span></span><span class="token string">'some value'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  browser<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'#main'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">css<span class="token punctuation">(</span></span><span class="token string">'display'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>which<span class="token punctuation">.</span><span class="token function">matches<span class="token punctuation">(</span></span><span class="token regex">/some\ value/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
        </div>
        
      </div>  <!-- end .apimethod -->
      
      <div class="apimethod">
        <h3 id="expect-enabled"><code>.enabled</code> <span class="since optional">since v0.7</span></h3>

        <p>Property that checks if an element is currently enabled.</p>
        


        
        <h5>Usage:</h5>
        <div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  browser<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'#weblogin'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span>enabled<span class="token punctuation">;</span>
  browser<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'#main'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>not<span class="token punctuation">.</span>be<span class="token punctuation">.</span>enabled<span class="token punctuation">;</span>
  browser<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'#main'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span>enabled<span class="token punctuation">.</span><span class="token function">before<span class="token punctuation">(</span></span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
        </div>
        
      </div>  <!-- end .apimethod -->
      
      <div class="apimethod">
        <h3 id="expect-present"><code>.present</code> <span class="since optional">since v0.7</span></h3>

        <p>Property that checks if an element is present in the DOM.</p>
        


        
        <h5>Usage:</h5>
        <div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  browser<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'#main'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span>present<span class="token punctuation">;</span>
  browser<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'#main'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>not<span class="token punctuation">.</span>be<span class="token punctuation">.</span>present<span class="token punctuation">;</span>
  browser<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'#main'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span>present<span class="token punctuation">.</span><span class="token function">before<span class="token punctuation">(</span></span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
        </div>
        
      </div>  <!-- end .apimethod -->
      
      <div class="apimethod">
        <h3 id="expect-selected"><code>.selected</code> <span class="since optional">since v0.7</span></h3>

        <p>Property that checks if an OPTION element, or an INPUT element of type checkbox or radio button is currently selected.</p>
        


        
        <h5>Usage:</h5>
        <div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  browser<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'#main'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span>selected<span class="token punctuation">;</span>
  browser<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'#main'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>not<span class="token punctuation">.</span>be<span class="token punctuation">.</span>selected<span class="token punctuation">;</span>
  browser<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'#main'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span>selected<span class="token punctuation">.</span><span class="token function">before<span class="token punctuation">(</span></span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
        </div>
        
      </div>  <!-- end .apimethod -->
      
      <div class="apimethod">
        <h3 id="expect-text"><code>.text</code> <span class="since optional">since v0.7</span></h3>

        <p>Property that retrieves the text contained by an element. Can be chained to check if contains/equals/matches the specified text or regex.</p>
        


        
        <h5>Usage:</h5>
        <div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  browser<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'#main'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">equal<span class="token punctuation">(</span></span><span class="token string">'The Night Watch'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  browser<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'#main'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span>to<span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">equal<span class="token punctuation">(</span></span><span class="token string">'The Night Watch'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  browser<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'#main'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">equal<span class="token punctuation">(</span></span><span class="token string">'The Night Watch'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">before<span class="token punctuation">(</span></span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  browser<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'#main'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">contain<span class="token punctuation">(</span></span><span class="token string">'The Night Watch'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  browser<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'#main'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">match<span class="token punctuation">(</span></span><span class="token regex">/The\ Night\ Watch/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
        </div>
        
      </div>  <!-- end .apimethod -->
      
      <div class="apimethod">
        <h3 id="expect-value"><code>.value</code></h3>

        <p>Property that retrieves the value (i.e. the value attributed) of an element. Can be chained to check if contains/equals/matches the specified text or regex.</p>
        


        
        <h5>Usage:</h5>
        <div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  browser<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'#q'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span>value<span class="token punctuation">.</span>that<span class="token punctuation">.</span><span class="token function">equals<span class="token punctuation">(</span></span><span class="token string">'search'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  browser<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'#q'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span>value<span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">equals<span class="token punctuation">(</span></span><span class="token string">'search'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  browser<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'#q'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span>value<span class="token punctuation">.</span>which<span class="token punctuation">.</span><span class="token function">contains<span class="token punctuation">(</span></span><span class="token string">'search'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  browser<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'#q'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span>value<span class="token punctuation">.</span>which<span class="token punctuation">.</span><span class="token function">matches<span class="token punctuation">(</span></span><span class="token regex">/search/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
        </div>
        
      </div>  <!-- end .apimethod -->
      
      <div class="apimethod">
        <h3 id="expect-visible"><code>.visible</code></h3>

        <p>Property that asserts the visibility of a specified element.</p>
        


        
        <h5>Usage:</h5>
        <div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  browser<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'#main'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span>visible<span class="token punctuation">;</span>
  browser<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'#main'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>not<span class="token punctuation">.</span>be<span class="token punctuation">.</span>visible<span class="token punctuation">;</span>
  browser<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">element<span class="token punctuation">(</span></span><span class="token string">'#main'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span>visible<span class="token punctuation">.</span><span class="token function">before<span class="token punctuation">(</span></span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
        </div>
        
      </div>  <!-- end .apimethod -->
      
    </div>
    <!-- ============================================================
    // END Expect
    ============================================================ -->

  </div>

  <div class="docs-section">
    <div class="page-header">
      <h2 id="assertions">Assert</h2>
    </div>
    <br>
    <p>The classic <code>assert</code>/<code>verify</code> library is still available on the Nightwatch instance as two objects containing the same methods to perform assertions on elements:
      </p><ul>
        <li><code>.assert</code> - when an assertion fails, the test ends, skipping all other assertions.</li>
        <li><code>.verify</code> - when an assertion fails, the test logs the failure and continues with other assertions.</li>
      </ul>
    <p></p>
<p>This will end the test:<br>
  </p><pre class=" language-javascript"><code class=" language-javascript">client<span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">visible<span class="token punctuation">(</span></span><span class="token string">'.non_existing'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p></p><p>
  But this will just log the failure and continue:<br>
  </p><pre class=" language-javascript"><code class=" language-javascript">client<span class="token punctuation">.</span>verify<span class="token punctuation">.</span><span class="token function">visible<span class="token punctuation">(</span></span><span class="token string">".non_existing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p></p>
<h4>Node.js Assert Module</h4>
<p>
  Nightwatch.js extends <a href="http://nodejs.org/api/assert.html" target="_blank">Node.js assert module</a>,
  so you can also use any of the available methods there in your tests.
</p>

<h4>Automatically retrying failed assertions</h4>
<p>
  You can tell Nightwatch to automatically retry failed assertions until a given timeout is reached, before the test runner gives up and fails the test.
  This can be accomplished by setting the property <code>retryAssertionTimeout</code> (in milliseconds) in the <code>globals</code> file.

  <br><br>
  For example: <code>retryAssertionTimeout = 2000</code>
</p>
  <!-- ============================================================
  // Assertions
  ============================================================ -->
  <div class="assertions">
  
    
    <!-- -->
    <div class="apimethod">
  <a name="assert-attributeContains"></a>
  <h3 id="assert-attributeContains"><code>attributeContains</code></h3>
  <p>Checks if the given attribute of an element contains the expected value.</p>

  <h5>Parameters:</h5>
  <div class="table-responsive">
    <table class="table table-bordered table-striped">
      <thead>
       <tr>
         <th style="width: 100px;">Name</th>
         <th style="width: 100px;">Type</th>
         <th>description</th>
       </tr>
      </thead>
      <tbody>
       
       <tr>
         <td><code>selector</code></td>
         <td>string</td>
         <td>The selector (CSS / Xpath) used to locate the element.</td>
       </tr>
       
       <tr>
         <td><code>attribute</code></td>
         <td>string</td>
         <td>The attribute name</td>
       </tr>
       
       <tr>
         <td><code>expected</code></td>
         <td>string</td>
         <td>The expected contained value of the attribute to check.</td>
       </tr>
       
       <tr>
         <td><code>message</code><br><span class="optional">Optional</span></td>
         <td>string</td>
         <td>Optional log message to display in the output. If missing, one is displayed by default.</td>
       </tr>
       
      </tbody>
    </table>
  </div>

  <h5>Usage:</h5>
  <div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>

  browser<span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">attributeContains<span class="token punctuation">(</span></span><span class="token string">'#someElement'</span><span class="token punctuation">,</span> <span class="token string">'href'</span><span class="token punctuation">,</span> <span class="token string">'google.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
    </div>
  </div> <!-- end .apimethod -->
  
    
    <!-- -->
    <div class="apimethod">
  <a name="assert-attributeEquals"></a>
  <h3 id="assert-attributeEquals"><code>attributeEquals</code></h3>
  <p>Checks if the given attribute of an element has the expected value.</p>

  <h5>Parameters:</h5>
  <div class="table-responsive">
    <table class="table table-bordered table-striped">
      <thead>
       <tr>
         <th style="width: 100px;">Name</th>
         <th style="width: 100px;">Type</th>
         <th>description</th>
       </tr>
      </thead>
      <tbody>
       
       <tr>
         <td><code>cssSelector</code></td>
         <td>string</td>
         <td>The CSS selector used to locate the element.</td>
       </tr>
       
       <tr>
         <td><code>attribute</code></td>
         <td>string</td>
         <td>The attribute name</td>
       </tr>
       
       <tr>
         <td><code>expected</code></td>
         <td>string</td>
         <td>The expected value of the attribute to check.</td>
       </tr>
       
       <tr>
         <td><code>msg</code><br><span class="optional">Optional</span></td>
         <td>string</td>
         <td>Optional log message to display in the output. If missing, one is displayed by default.</td>
       </tr>
       
      </tbody>
    </table>
  </div>

  <h5>Usage:</h5>
  <div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>

  browser<span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">attributeEquals<span class="token punctuation">(</span></span><span class="token string">"body"</span><span class="token punctuation">,</span> <span class="token string">"data-attr"</span><span class="token punctuation">,</span> <span class="token string">"some value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
    </div>
  </div> <!-- end .apimethod -->
  
    
    <!-- -->
    <div class="apimethod">
  <a name="assert-containsText"></a>
  <h3 id="assert-containsText"><code>containsText</code></h3>
  <p>Checks if the given element contains the specified text.</p>

  <h5>Parameters:</h5>
  <div class="table-responsive">
    <table class="table table-bordered table-striped">
      <thead>
       <tr>
         <th style="width: 100px;">Name</th>
         <th style="width: 100px;">Type</th>
         <th>description</th>
       </tr>
      </thead>
      <tbody>
       
       <tr>
         <td><code>cssSelector</code></td>
         <td>string</td>
         <td>The CSS selector used to locate the element.</td>
       </tr>
       
       <tr>
         <td><code>expectedText</code></td>
         <td>string</td>
         <td>The text to look for.</td>
       </tr>
       
       <tr>
         <td><code>msg</code><br><span class="optional">Optional</span></td>
         <td>string</td>
         <td>Optional log message to display in the output. If missing, one is displayed by default.</td>
       </tr>
       
      </tbody>
    </table>
  </div>

  <h5>Usage:</h5>
  <div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>

  browser<span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">containsText<span class="token punctuation">(</span></span><span class="token string">"#main"</span><span class="token punctuation">,</span> <span class="token string">"The Night Watch"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
    </div>
  </div> <!-- end .apimethod -->
  
    
    <!-- -->
    <div class="apimethod">
  <a name="assert-cssClassPresent"></a>
  <h3 id="assert-cssClassPresent"><code>cssClassPresent</code></h3>
  <p>Checks if the given element has the specified CSS class.</p>

  <h5>Parameters:</h5>
  <div class="table-responsive">
    <table class="table table-bordered table-striped">
      <thead>
       <tr>
         <th style="width: 100px;">Name</th>
         <th style="width: 100px;">Type</th>
         <th>description</th>
       </tr>
      </thead>
      <tbody>
       
       <tr>
         <td><code>cssSelector</code></td>
         <td>string</td>
         <td>The CSS selector used to locate the element.</td>
       </tr>
       
       <tr>
         <td><code>className</code></td>
         <td>string</td>
         <td>The CSS class to look for.</td>
       </tr>
       
       <tr>
         <td><code>msg</code><br><span class="optional">Optional</span></td>
         <td>string</td>
         <td>Optional log message to display in the output. If missing, one is displayed by default.</td>
       </tr>
       
      </tbody>
    </table>
  </div>

  <h5>Usage:</h5>
  <div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>

  browser<span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">cssClassPresent<span class="token punctuation">(</span></span><span class="token string">"#main"</span><span class="token punctuation">,</span> <span class="token string">"container"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
    </div>
  </div> <!-- end .apimethod -->
  
    
    <!-- -->
    <div class="apimethod">
  <a name="assert-cssClassNotPresent"></a>
  <h3 id="assert-cssClassNotPresent"><code>cssClassNotPresent</code></h3>
  <p>Checks if the given element does not have the specified CSS class.</p>

  <h5>Parameters:</h5>
  <div class="table-responsive">
    <table class="table table-bordered table-striped">
      <thead>
       <tr>
         <th style="width: 100px;">Name</th>
         <th style="width: 100px;">Type</th>
         <th>description</th>
       </tr>
      </thead>
      <tbody>
       
       <tr>
         <td><code>cssSelector</code></td>
         <td>string</td>
         <td>The CSS selector used to locate the element.</td>
       </tr>
       
       <tr>
         <td><code>className</code></td>
         <td>string</td>
         <td>The CSS class to look for.</td>
       </tr>
       
       <tr>
         <td><code>msg</code><br><span class="optional">Optional</span></td>
         <td>string</td>
         <td>Optional log message to display in the output. If missing, one is displayed by default.</td>
       </tr>
       
      </tbody>
    </table>
  </div>

  <h5>Usage:</h5>
  <div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>

  browser<span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">cssClassNotPresent<span class="token punctuation">(</span></span><span class="token string">"#main"</span><span class="token punctuation">,</span> <span class="token string">"container"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
    </div>
  </div> <!-- end .apimethod -->
  
    
    <!-- -->
    <div class="apimethod">
  <a name="assert-cssProperty"></a>
  <h3 id="assert-cssProperty"><code>cssProperty</code></h3>
  <p>Checks if the specified css property of a given element has the expected value.</p>

  <h5>Parameters:</h5>
  <div class="table-responsive">
    <table class="table table-bordered table-striped">
      <thead>
       <tr>
         <th style="width: 100px;">Name</th>
         <th style="width: 100px;">Type</th>
         <th>description</th>
       </tr>
      </thead>
      <tbody>
       
       <tr>
         <td><code>cssSelector</code></td>
         <td>string</td>
         <td>The CSS selector used to locate the element.</td>
       </tr>
       
       <tr>
         <td><code>cssProperty</code></td>
         <td>string</td>
         <td>The CSS property.</td>
       </tr>
       
       <tr>
         <td><code>expected</code></td>
         <td>string|number</td>
         <td>The expected value of the css property to check.</td>
       </tr>
       
       <tr>
         <td><code>msg</code><br><span class="optional">Optional</span></td>
         <td>string</td>
         <td>Optional log message to display in the output. If missing, one is displayed by default.</td>
       </tr>
       
      </tbody>
    </table>
  </div>

  <h5>Usage:</h5>
  <div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>

  browser<span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">cssProperty<span class="token punctuation">(</span></span><span class="token string">"#main"</span><span class="token punctuation">,</span> <span class="token string">"display"</span><span class="token punctuation">,</span> <span class="token string">"block"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
    </div>
  </div> <!-- end .apimethod -->
  
    
    <!-- -->
    <div class="apimethod">
  <a name="assert-elementPresent"></a>
  <h3 id="assert-elementPresent"><code>elementPresent</code></h3>
  <p>Checks if the given element exists in the DOM.</p>

  <h5>Parameters:</h5>
  <div class="table-responsive">
    <table class="table table-bordered table-striped">
      <thead>
       <tr>
         <th style="width: 100px;">Name</th>
         <th style="width: 100px;">Type</th>
         <th>description</th>
       </tr>
      </thead>
      <tbody>
       
       <tr>
         <td><code>cssSelector</code></td>
         <td>string</td>
         <td>The CSS selector used to locate the element.</td>
       </tr>
       
       <tr>
         <td><code>msg</code><br><span class="optional">Optional</span></td>
         <td>string</td>
         <td>Optional log message to display in the output. If missing, one is displayed by default.</td>
       </tr>
       
      </tbody>
    </table>
  </div>

  <h5>Usage:</h5>
  <div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>

  browser<span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">elementPresent<span class="token punctuation">(</span></span><span class="token string">"#main"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
    </div>
  </div> <!-- end .apimethod -->
  
    
    <!-- -->
    <div class="apimethod">
  <a name="assert-elementNotPresent"></a>
  <h3 id="assert-elementNotPresent"><code>elementNotPresent</code></h3>
  <p>Checks if the given element does not exist in the DOM.</p>

  <h5>Parameters:</h5>
  <div class="table-responsive">
    <table class="table table-bordered table-striped">
      <thead>
       <tr>
         <th style="width: 100px;">Name</th>
         <th style="width: 100px;">Type</th>
         <th>description</th>
       </tr>
      </thead>
      <tbody>
       
       <tr>
         <td><code>cssSelector</code></td>
         <td>string</td>
         <td>The CSS selector used to locate the element.</td>
       </tr>
       
       <tr>
         <td><code>msg</code><br><span class="optional">Optional</span></td>
         <td>string</td>
         <td>Optional log message to display in the output. If missing, one is displayed by default.</td>
       </tr>
       
      </tbody>
    </table>
  </div>

  <h5>Usage:</h5>
  <div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>

  browser<span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">elementNotPresent<span class="token punctuation">(</span></span><span class="token string">".should_not_exist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
    </div>
  </div> <!-- end .apimethod -->
  
    
    <!-- -->
    <div class="apimethod">
  <a name="assert-hidden"></a>
  <h3 id="assert-hidden"><code>hidden</code></h3>
  <p>Checks if the given element is not visible on the page.</p>

  <h5>Parameters:</h5>
  <div class="table-responsive">
    <table class="table table-bordered table-striped">
      <thead>
       <tr>
         <th style="width: 100px;">Name</th>
         <th style="width: 100px;">Type</th>
         <th>description</th>
       </tr>
      </thead>
      <tbody>
       
       <tr>
         <td><code>cssSelector</code></td>
         <td>string</td>
         <td>The CSS selector used to locate the element.</td>
       </tr>
       
       <tr>
         <td><code>msg</code><br><span class="optional">Optional</span></td>
         <td>string</td>
         <td>Optional log message to display in the output. If missing, one is displayed by default.</td>
       </tr>
       
      </tbody>
    </table>
  </div>

  <h5>Usage:</h5>
  <div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>

  browser<span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">hidden<span class="token punctuation">(</span></span><span class="token string">".should_not_be_visible"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
    </div>
  </div> <!-- end .apimethod -->
  
    
    <!-- -->
    <div class="apimethod">
  <a name="assert-title"></a>
  <h3 id="assert-title"><code>title</code></h3>
  <p>Checks if the page title equals the given value.</p>

  <h5>Parameters:</h5>
  <div class="table-responsive">
    <table class="table table-bordered table-striped">
      <thead>
       <tr>
         <th style="width: 100px;">Name</th>
         <th style="width: 100px;">Type</th>
         <th>description</th>
       </tr>
      </thead>
      <tbody>
       
       <tr>
         <td><code>expected</code></td>
         <td>string</td>
         <td>The expected page title.</td>
       </tr>
       
       <tr>
         <td><code>msg</code><br><span class="optional">Optional</span></td>
         <td>string</td>
         <td>Optional log message to display in the output. If missing, one is displayed by default.</td>
       </tr>
       
      </tbody>
    </table>
  </div>

  <h5>Usage:</h5>
  <div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>

  browser<span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">title<span class="token punctuation">(</span></span><span class="token string">"Nightwatch.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
    </div>
  </div> <!-- end .apimethod -->
  
    
    <!-- -->
    <div class="apimethod">
  <a name="assert-urlContains"></a>
  <h3 id="assert-urlContains"><code>urlContains</code> <span class="since optional">since v0.5.1</span></h3>
  <p>Checks if the current URL contains the given value.</p>

  <h5>Parameters:</h5>
  <div class="table-responsive">
    <table class="table table-bordered table-striped">
      <thead>
       <tr>
         <th style="width: 100px;">Name</th>
         <th style="width: 100px;">Type</th>
         <th>description</th>
       </tr>
      </thead>
      <tbody>
       
       <tr>
         <td><code>expectedText</code></td>
         <td>string</td>
         <td>The value expected to exist within the current URL.</td>
       </tr>
       
       <tr>
         <td><code>msg</code><br><span class="optional">Optional</span></td>
         <td>string</td>
         <td>Optional log message to display in the output. If missing, one is displayed by default.</td>
       </tr>
       
      </tbody>
    </table>
  </div>

  <h5>Usage:</h5>
  <div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>

  browser<span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">urlContains<span class="token punctuation">(</span></span><span class="token string">'google'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
    </div>
  </div> <!-- end .apimethod -->
  
    
    <!-- -->
    <div class="apimethod">
  <a name="assert-urlEquals"></a>
  <h3 id="assert-urlEquals"><code>urlEquals</code> <span class="since optional">since v0.5.1</span></h3>
  <p>Checks if the current url equals the given value.</p>

  <h5>Parameters:</h5>
  <div class="table-responsive">
    <table class="table table-bordered table-striped">
      <thead>
       <tr>
         <th style="width: 100px;">Name</th>
         <th style="width: 100px;">Type</th>
         <th>description</th>
       </tr>
      </thead>
      <tbody>
       
       <tr>
         <td><code>expected</code></td>
         <td>string</td>
         <td>The expected url.</td>
       </tr>
       
       <tr>
         <td><code>msg</code><br><span class="optional">Optional</span></td>
         <td>string</td>
         <td>Optional log message to display in the output. If missing, one is displayed by default.</td>
       </tr>
       
      </tbody>
    </table>
  </div>

  <h5>Usage:</h5>
  <div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>

  browser<span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">urlEquals<span class="token punctuation">(</span></span><span class="token string">'http://www.google.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
    </div>
  </div> <!-- end .apimethod -->
  
    
    <!-- -->
    <div class="apimethod">
  <a name="assert-value"></a>
  <h3 id="assert-value"><code>value</code></h3>
  <p>Checks if the given form element's value equals the expected value.</p>

  <h5>Parameters:</h5>
  <div class="table-responsive">
    <table class="table table-bordered table-striped">
      <thead>
       <tr>
         <th style="width: 100px;">Name</th>
         <th style="width: 100px;">Type</th>
         <th>description</th>
       </tr>
      </thead>
      <tbody>
       
       <tr>
         <td><code>cssSelector</code></td>
         <td>string</td>
         <td>The CSS selector used to locate the element.</td>
       </tr>
       
       <tr>
         <td><code>expectedText</code></td>
         <td>string</td>
         <td>The expected text.</td>
       </tr>
       
       <tr>
         <td><code>msg</code><br><span class="optional">Optional</span></td>
         <td>string</td>
         <td>Optional log message to display in the output. If missing, one is displayed by default.</td>
       </tr>
       
      </tbody>
    </table>
  </div>

  <h5>Usage:</h5>
  <div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>

  browser<span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">value<span class="token punctuation">(</span></span><span class="token string">"form.login input[type=text]"</span><span class="token punctuation">,</span> <span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
    </div>
  </div> <!-- end .apimethod -->
  
    
    <!-- -->
    <div class="apimethod">
  <a name="assert-valueContains"></a>
  <h3 id="assert-valueContains"><code>valueContains</code></h3>
  <p>Checks if the given form element's value contains the expected value.</p>

  <h5>Parameters:</h5>
  <div class="table-responsive">
    <table class="table table-bordered table-striped">
      <thead>
       <tr>
         <th style="width: 100px;">Name</th>
         <th style="width: 100px;">Type</th>
         <th>description</th>
       </tr>
      </thead>
      <tbody>
       
       <tr>
         <td><code>cssSelector</code></td>
         <td>string</td>
         <td>The CSS selector used to locate the element.</td>
       </tr>
       
       <tr>
         <td><code>expectedText</code></td>
         <td>string</td>
         <td>The expected text.</td>
       </tr>
       
       <tr>
         <td><code>msg</code><br><span class="optional">Optional</span></td>
         <td>string</td>
         <td>Optional log message to display in the output. If missing, one is displayed by default.</td>
       </tr>
       
      </tbody>
    </table>
  </div>

  <h5>Usage:</h5>
  <div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>

  browser<span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">valueContains<span class="token punctuation">(</span></span><span class="token string">"form.login input[type=text]"</span><span class="token punctuation">,</span> <span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
    </div>
  </div> <!-- end .apimethod -->
  
    
    <!-- -->
    <div class="apimethod">
  <a name="assert-visible"></a>
  <h3 id="assert-visible"><code>visible</code></h3>
  <p>Checks if the given element is visible on the page.</p>

  <h5>Parameters:</h5>
  <div class="table-responsive">
    <table class="table table-bordered table-striped">
      <thead>
       <tr>
         <th style="width: 100px;">Name</th>
         <th style="width: 100px;">Type</th>
         <th>description</th>
       </tr>
      </thead>
      <tbody>
       
       <tr>
         <td><code>cssSelector</code></td>
         <td>string</td>
         <td>The CSS selector used to locate the element.</td>
       </tr>
       
       <tr>
         <td><code>msg</code><br><span class="optional">Optional</span></td>
         <td>string</td>
         <td>Optional log message to display in the output. If missing, one is displayed by default.</td>
       </tr>
       
      </tbody>
    </table>
  </div>

  <h5>Usage:</h5>
  <div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>

  browser<span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">visible<span class="token punctuation">(</span></span><span class="token string">".should_be_visible"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
    </div>
  </div> <!-- end .apimethod -->
  
  </div>
  <!-- ============================================================
  // END Assertions
  ============================================================ -->



  </div>

  <div class="docs-section">
    <div class="page-header">
      <h2 id="commands">Commands</h2>
    </div>
    <p>The commands are convenience methods for performing various operations on the page and usually incorporate two or more Selenium protocol actions.</p>
    <h4>The callback function</h4>
    <p>Each method below allows an optional <code>callback</code> argument to be passed as the last argument. The callback function will then be called after the command is completed
       with the main instance as the context and the response object as argument.</p>
<div class="sample-test"><pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>

  browser<span class="token punctuation">.</span><span class="token function">click<span class="token punctuation">(</span></span><span class="token string">"#main ul li a.first"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">ok<span class="token punctuation">(</span></span>browser <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"Check if the context is right."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">ok<span class="token punctuation">(</span></span><span class="token keyword">typeof</span> response <span class="token operator">==</span> <span class="token string">"object"</span><span class="token punctuation">,</span> <span class="token string">"We got a response object."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>
    <!-- ============================================================
    // Commands
    ============================================================ -->
      <div class="commands">
  
      <div class="apimethod">
    <h3 id="clearValue"><a href="http://nightwatchjs.org/api/clearValue.html"><code>clearValue</code></a></h3>
    

    <p>Clear a textarea or a text input element's value. Uses <code>elementIdValue</code> protocol command.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>selector</code></td>
           <td>string</td>
           <td>The CSS/Xpath selector used to locate the element.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>client<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  client<span class="token punctuation">.</span><span class="token function">clearValue<span class="token punctuation">(</span></span><span class="token string">'input[type=text]'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
</div>
  
  </div>  <!-- end .apimethod -->
  
      <div class="apimethod">
    <h3 id="click"><a href="http://nightwatchjs.org/api/click.html"><code>click</code></a></h3>
    

    <p>Simulates a click event on the given DOM element. Uses <code>elementIdClick</code> protocol command.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>selector</code></td>
           <td>string</td>
           <td>The CSS/Xpath selector used to locate the element.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>client<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  client<span class="token punctuation">.</span><span class="token function">click<span class="token punctuation">(</span></span><span class="token string">"#main ul li a.first"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
</div>
  
  </div>  <!-- end .apimethod -->
  
      <div class="apimethod">
    <h3 id="closeWindow"><a href="http://nightwatchjs.org/api/closeWindow.html"><code>closeWindow</code></a> <span class="since optional">since v0.3.0</span></h3>
    

    <p>Close the current window. This can be useful when you're working with multiple windows open (e.g. an OAuth login).<br>Uses <code>window</code> protocol command.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>client<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  client<span class="token punctuation">.</span><span class="token function">closeWindow<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
</div>
  
  </div>  <!-- end .apimethod -->
  
      <div class="apimethod">
    <h3 id="deleteCookie"><a href="http://nightwatchjs.org/api/deleteCookie.html"><code>deleteCookie</code></a> <span class="since optional">since v0.4.0</span></h3>
    

    <p>Delete the cookie with the given name. This command is a no-op if there is no such cookie visible to the current page.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>The</code></td>
           <td>cookieName</td>
           <td>name of the cookie to delete.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  browser<span class="token punctuation">.</span><span class="token function">deleteCookie<span class="token punctuation">(</span></span><span class="token string">"test_cookie"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment" spellcheck="true"> // do something more in here
</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
</div>
  
  </div>  <!-- end .apimethod -->
  
      <div class="apimethod">
    <h3 id="deleteCookies"><a href="http://nightwatchjs.org/api/deleteCookies.html"><code>deleteCookies</code></a> <span class="since optional">since v0.4.0</span></h3>
    

    <p>Delete all cookies visible to the current page.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  browser<span class="token punctuation">.</span><span class="token function">deleteCookies<span class="token punctuation">(</span></span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment" spellcheck="true"> // do something more in here
</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
</div>
  
  </div>  <!-- end .apimethod -->
  
      <div class="apimethod">
    <h3 id="end"><a href="http://nightwatchjs.org/api/end.html"><code>end</code></a></h3>
    

    <p>Ends the session. Uses session protocol command.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  browser<span class="token punctuation">.</span><span class="token function">end<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
</div>
  
  </div>  <!-- end .apimethod -->
  
      <div class="apimethod">
    <h3 id="getAttribute"><a href="http://nightwatchjs.org/api/getAttribute.html"><code>getAttribute</code></a></h3>
    

    <p>Retrieve the value of an attribute for a given DOM element. Uses <code>elementIdAttribute</code> protocol command.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>selector</code></td>
           <td>string</td>
           <td>The CSS/Xpath selector used to locate the element.</td>
         </tr>
         
         <tr>
           <td><code>atttribute</code></td>
           <td>string</td>
           <td>The attribute name to inspect.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    <h5>Returns</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 200px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         <tr>
           <td>*</td>
           <td> The value of the attribute</td>
         </tr>
        </tbody>
      </table>
    </div>
    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>client<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  client<span class="token punctuation">.</span><span class="token function">getAttribute<span class="token punctuation">(</span></span><span class="token string">"#main ul li a.first"</span><span class="token punctuation">,</span> <span class="token string">"href"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">equal<span class="token punctuation">(</span></span><span class="token keyword">typeof</span> result<span class="token punctuation">,</span> <span class="token string">"object"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">equal<span class="token punctuation">(</span></span>result<span class="token punctuation">.</span>status<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">equal<span class="token punctuation">(</span></span>result<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token string">"#home"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
</div>
  
  </div>  <!-- end .apimethod -->
  
      <div class="apimethod">
    <h3 id="getCookie"><a href="http://nightwatchjs.org/api/getCookie.html"><code>getCookie</code></a> <span class="since optional">since v0.4.0</span></h3>
    

    <p>Retrieve a single cookie visible to the current page. The cookie is returned as a cookie JSON object, as defined <a href="https://code.google.com/p/selenium/wiki/JsonWireProtocol#Cookie_JSON_Object">here</a>.</p>

<p>Uses <code>cookie</code> protocol command.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>name</code></td>
           <td>string</td>
           <td>The cookie name.</td>
         </tr>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td>The callback function which will receive the response as an argument.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    <h5>Returns</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 200px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         <tr>
           <td>object|null</td>
           <td> The cookie object as a selenium cookie JSON object or null if the cookie wasn't found.</td>
         </tr>
        </tbody>
      </table>
    </div>
    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  browser<span class="token punctuation">.</span><span class="token function">getCookie<span class="token punctuation">(</span></span>name<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">callback<span class="token punctuation">(</span></span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">equal<span class="token punctuation">(</span></span>result<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token string">'123456'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">equals<span class="token punctuation">(</span></span>result<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">'test_cookie'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
</div>
  
  </div>  <!-- end .apimethod -->
  
      <div class="apimethod">
    <h3 id="getCookies"><a href="http://nightwatchjs.org/api/getCookies.html"><code>getCookies</code></a> <span class="since optional">since v0.4.0</span></h3>
    

    <p>Retrieve all cookies visible to the current page. The cookies are returned as an array of cookie JSON object, as defined <a href="https://code.google.com/p/selenium/wiki/JsonWireProtocol#Cookie_JSON_Object">here</a>.</p>

<p>Uses <code>cookie</code> protocol command.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td>The callback function which will receive the response as an argument.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    <h5>Returns</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 200px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         <tr>
           <td>Array.&lt;object&gt;</td>
           <td> A list of cookies.</td>
         </tr>
        </tbody>
      </table>
    </div>
    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  browser<span class="token punctuation">.</span><span class="token function">getCookies<span class="token punctuation">(</span></span><span class="token keyword">function</span> <span class="token function">callback<span class="token punctuation">(</span></span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">equal<span class="token punctuation">(</span></span>result<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">equals<span class="token punctuation">(</span></span>result<span class="token punctuation">.</span>value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">'test_cookie'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
</div>
  
  </div>  <!-- end .apimethod -->
  
      <div class="apimethod">
    <h3 id="getCssProperty"><a href="http://nightwatchjs.org/api/getCssProperty.html"><code>getCssProperty</code></a></h3>
    

    <p>Retrieve the value of a css property for a given DOM element. Uses <code>elementIdCssProperty</code> protocol command.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>selector</code></td>
           <td>string</td>
           <td>The CSS/Xpath selector used to locate the element.</td>
         </tr>
         
         <tr>
           <td><code>cssProperty</code></td>
           <td>string</td>
           <td>The CSS property to inspect.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    <h5>Returns</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 200px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         <tr>
           <td>*</td>
           <td> The value of the css property</td>
         </tr>
        </tbody>
      </table>
    </div>
    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>client<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  client<span class="token punctuation">.</span><span class="token function">getCssProperty<span class="token punctuation">(</span></span><span class="token string">"#main ul li a.first"</span><span class="token punctuation">,</span> <span class="token string">"display"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">equal<span class="token punctuation">(</span></span><span class="token keyword">typeof</span> result<span class="token punctuation">,</span> <span class="token string">"object"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">equal<span class="token punctuation">(</span></span>result<span class="token punctuation">.</span>status<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">equal<span class="token punctuation">(</span></span>result<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token string">'inline'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
</div>
  
  </div>  <!-- end .apimethod -->
  
      <div class="apimethod">
    <h3 id="getElementSize"><a href="http://nightwatchjs.org/api/getElementSize.html"><code>getElementSize</code></a></h3>
    

    <p>Determine an element's size in pixels. Uses <code>elementIdSize</code> protocol command.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>selector</code></td>
           <td>string</td>
           <td>The CSS/Xpath selector used to locate the element.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    <h5>Returns</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 200px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         <tr>
           <td>{width: number, height: number}</td>
           <td> The width and height of the element in pixels</td>
         </tr>
        </tbody>
      </table>
    </div>
    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>client<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  client<span class="token punctuation">.</span><span class="token function">getElementSize<span class="token punctuation">(</span></span><span class="token string">"#main ul li a.first"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">equal<span class="token punctuation">(</span></span><span class="token keyword">typeof</span> result<span class="token punctuation">,</span> <span class="token string">"object"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">equal<span class="token punctuation">(</span></span>result<span class="token punctuation">.</span>status<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">equal<span class="token punctuation">(</span></span>result<span class="token punctuation">.</span>value<span class="token punctuation">.</span>width<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">equal<span class="token punctuation">(</span></span>result<span class="token punctuation">.</span>value<span class="token punctuation">.</span>height<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
</div>
  
  </div>  <!-- end .apimethod -->
  
      <div class="apimethod">
    <h3 id="getLocation"><a href="http://nightwatchjs.org/api/getLocation.html"><code>getLocation</code></a></h3>
    

    <p>Determine an element's location on the page. The point (0, 0) refers to the upper-left corner of the page.</p>

<p>The element's coordinates are returned as a JSON object with x and y properties. Uses <code>elementIdLocation</code> protocol command.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>selector</code></td>
           <td>string</td>
           <td>The CSS/Xpath selector used to locate the element.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    <h5>Returns</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 200px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         <tr>
           <td>x:number, y:number</td>
           <td> The X and Y coordinates for the element on the page.</td>
         </tr>
        </tbody>
      </table>
    </div>
    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>client<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  client<span class="token punctuation">.</span><span class="token function">getLocation<span class="token punctuation">(</span></span><span class="token string">"#main ul li a.first"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">equal<span class="token punctuation">(</span></span><span class="token keyword">typeof</span> result<span class="token punctuation">,</span> <span class="token string">"object"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">equal<span class="token punctuation">(</span></span>result<span class="token punctuation">.</span>status<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">equal<span class="token punctuation">(</span></span>result<span class="token punctuation">.</span>value<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">equal<span class="token punctuation">(</span></span>result<span class="token punctuation">.</span>value<span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
</div>
  
  </div>  <!-- end .apimethod -->
  
      <div class="apimethod">
    <h3 id="getLocationInView"><a href="http://nightwatchjs.org/api/getLocationInView.html"><code>getLocationInView</code></a></h3>
    

    <p>Determine an element's location on the screen once it has been scrolled into view. Uses <code>elementIdLocationInView</code> protocol command.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>selector</code></td>
           <td>string</td>
           <td>The CSS/Xpath selector used to locate the element.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    <h5>Returns</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 200px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         <tr>
           <td>x: number, y: number</td>
           <td> The X and Y coordinates for the element on the page.</td>
         </tr>
        </tbody>
      </table>
    </div>
    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  browser<span class="token punctuation">.</span><span class="token function">getLocationInView<span class="token punctuation">(</span></span><span class="token string">"#main ul li a.first"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">equal<span class="token punctuation">(</span></span><span class="token keyword">typeof</span> result<span class="token punctuation">,</span> <span class="token string">"object"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">equal<span class="token punctuation">(</span></span>result<span class="token punctuation">.</span>status<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">equal<span class="token punctuation">(</span></span>result<span class="token punctuation">.</span>value<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">equal<span class="token punctuation">(</span></span>result<span class="token punctuation">.</span>value<span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
</div>
  
  </div>  <!-- end .apimethod -->
  
      <div class="apimethod">
    <h3 id="getLog"><a href="http://nightwatchjs.org/api/getLog.html"><code>getLog</code></a></h3>
    

    <p>Gets a log from selenium</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>typeString</code></td>
           <td>string|function</td>
           <td>Log type to request</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLog<span class="token punctuation">(</span></span><span class="token string">'browser'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>logEntriesArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log<span class="token punctuation">(</span></span><span class="token string">'Log length: '</span> <span class="token operator">+</span> logEntriesArray<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    logEntriesArray<span class="token punctuation">.</span><span class="token function">forEach<span class="token punctuation">(</span></span><span class="token keyword">function</span><span class="token punctuation">(</span>log<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       console<span class="token punctuation">.</span><span class="token function">log<span class="token punctuation">(</span></span><span class="token string">'['</span> <span class="token operator">+</span> log<span class="token punctuation">.</span>level <span class="token operator">+</span> <span class="token string">'] '</span> <span class="token operator">+</span> log<span class="token punctuation">.</span>timestamp <span class="token operator">+</span> <span class="token string">' : '</span> <span class="token operator">+</span> log<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
</div>
  
  </div>  <!-- end .apimethod -->
  
      <div class="apimethod">
    <h3 id="getLogTypes"><a href="http://nightwatchjs.org/api/getLogTypes.html"><code>getLogTypes</code></a></h3>
    

    <p>Gets the available log types</p>

<div class="highlight"><pre lang="">this.demoTest = function(client) {
  this.getLogTypes(function(typesArray) {

  });
};
</pre></div>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>  <!-- end .apimethod -->
  
      <div class="apimethod">
    <h3 id="getTagName"><a href="http://nightwatchjs.org/api/getTagName.html"><code>getTagName</code></a></h3>
    

    <p>Query for an element's tag name. Uses <code>elementIdName</code> protocol command.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>selector</code></td>
           <td>string</td>
           <td>The CSS/Xpath selector used to locate the element.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    <h5>Returns</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 200px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         <tr>
           <td>number</td>
           <td> The element's tag name, as a lowercase string.</td>
         </tr>
        </tbody>
      </table>
    </div>
    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>client<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  client<span class="token punctuation">.</span><span class="token function">getTagName<span class="token punctuation">(</span></span><span class="token string">"#main ul li .first"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">equal<span class="token punctuation">(</span></span><span class="token keyword">typeof</span> result<span class="token punctuation">,</span> <span class="token string">"object"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">equal<span class="token punctuation">(</span></span>result<span class="token punctuation">.</span>status<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">equal<span class="token punctuation">(</span></span>result<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
</div>
  
  </div>  <!-- end .apimethod -->
  
      <div class="apimethod">
    <h3 id="getText"><a href="http://nightwatchjs.org/api/getText.html"><code>getText</code></a></h3>
    

    <p>Returns the visible text for the element. Uses <code>elementIdText</code> protocol command.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>selector</code></td>
           <td>string</td>
           <td>The CSS/Xpath selector used to locate the element.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    <h5>Returns</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 200px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         <tr>
           <td>string</td>
           <td> The element's visible text.</td>
         </tr>
        </tbody>
      </table>
    </div>
    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  browser<span class="token punctuation">.</span><span class="token function">getText<span class="token punctuation">(</span></span><span class="token string">"#main ul li a.first"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">equal<span class="token punctuation">(</span></span><span class="token keyword">typeof</span> result<span class="token punctuation">,</span> <span class="token string">"object"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">equal<span class="token punctuation">(</span></span>result<span class="token punctuation">.</span>status<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">equal<span class="token punctuation">(</span></span>result<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token string">"nightwatchjs.org"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
</div>
  
  </div>  <!-- end .apimethod -->
  
      <div class="apimethod">
    <h3 id="getTitle"><a href="http://nightwatchjs.org/api/getTitle.html"><code>getTitle</code></a></h3>
    

    <p>Returns the title of the current page. Uses title protocol command.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    <h5>Returns</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 200px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         <tr>
           <td>string</td>
           <td> The page title.</td>
         </tr>
        </tbody>
      </table>
    </div>
    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
 <span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   browser<span class="token punctuation">.</span><span class="token function">getTitle<span class="token punctuation">(</span></span><span class="token keyword">function</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">equal<span class="token punctuation">(</span></span><span class="token keyword">typeof</span> title<span class="token punctuation">,</span> <span class="token string">'string'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">equal<span class="token punctuation">(</span></span>title<span class="token punctuation">,</span> <span class="token string">'Nightwatch.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
</div>
  
  </div>  <!-- end .apimethod -->
  
      <div class="apimethod">
    <h3 id="getValue"><a href="http://nightwatchjs.org/api/getValue.html"><code>getValue</code></a></h3>
    

    <p>Returns a form element current value. Uses <code>elementIdValue</code> protocol command.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>selector</code></td>
           <td>string</td>
           <td>The CSS/Xpath selector used to locate the element.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    <h5>Returns</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 200px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         <tr>
           <td>string</td>
           <td> The element's value.</td>
         </tr>
        </tbody>
      </table>
    </div>
    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  browser<span class="token punctuation">.</span><span class="token function">getValue<span class="token punctuation">(</span></span><span class="token string">"form.login input[type=text]"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">equal<span class="token punctuation">(</span></span><span class="token keyword">typeof</span> result<span class="token punctuation">,</span> <span class="token string">"object"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">equal<span class="token punctuation">(</span></span>result<span class="token punctuation">.</span>status<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">equal<span class="token punctuation">(</span></span>result<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token string">"enter username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
</div>
  
  </div>  <!-- end .apimethod -->
  
      <div class="apimethod">
    <h3 id="init"><a href="http://nightwatchjs.org/api/init.html"><code>init</code></a> <span class="since optional">since v0.4.0</span></h3>
    

    <p>This command is an alias to url and also a convenience method when called without any arguments in the sense that it performs a call to .url() with passing the value of <code>launch_url</code> field from the settings file.<br>Uses <code>url</code> protocol command.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>url</code><br><span class="optional">Optional</span></td>
           <td>string</td>
           <td>Url to navigate to.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>client<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  client<span class="token punctuation">.</span><span class="token function">init<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
</div>
  
  </div>  <!-- end .apimethod -->
  
      <div class="apimethod">
    <h3 id="injectScript"><a href="http://nightwatchjs.org/api/injectScript.html"><code>injectScript</code></a> <span class="since optional">since v0.4.0</span></h3>
    

    <p>Utility command to load an external script into the page specified by url.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>scriptUrl</code></td>
           <td>string</td>
           <td>The script file url</td>
         </tr>
         
         <tr>
           <td><code>id</code><br><span class="optional">Optional</span></td>
           <td>string</td>
           <td>Dom element id to be set on the script tag.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    <h5>Returns</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 200px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         <tr>
           <td>HTMLScriptElement</td>
           <td> The newly created script tag.</td>
         </tr>
        </tbody>
      </table>
    </div>
    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">injectScript<span class="token punctuation">(</span></span><span class="token string">'&lt;a href='</span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>example<span class="token punctuation">.</span>org<span class="token operator">/</span>js<span class="token operator">/</span>utility<span class="token punctuation">.</span>js<span class="token string">'&gt;http://example.org/js/utility.js&lt;/a&gt;'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment" spellcheck="true"> // we're all done here.
</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
</div>
  
  </div>  <!-- end .apimethod -->
  
      <div class="apimethod">
    <h3 id="isLogAvailable"><a href="http://nightwatchjs.org/api/isLogAvailable.html"><code>isLogAvailable</code></a></h3>
    

    <p>Utility command to test if the log type is available</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>typeString</code></td>
           <td>string|function</td>
           <td>Type of log to test</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  browser<span class="token punctuation">.</span><span class="token function">isLogAvailable<span class="token punctuation">(</span></span><span class="token string">'browser'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>isAvailable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment" spellcheck="true"> // do something more in here
</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
</div>
  
  </div>  <!-- end .apimethod -->
  
      <div class="apimethod">
    <h3 id="isVisible"><a href="http://nightwatchjs.org/api/isVisible.html"><code>isVisible</code></a></h3>
    

    <p>Determine if an element is currently displayed. Uses <code>elementIdDisplayed</code> protocol command.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>selector</code></td>
           <td>string</td>
           <td>The CSS/Xpath selector used to locate the element.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  browser<span class="token punctuation">.</span><span class="token function">isVisible<span class="token punctuation">(</span></span><span class="token string">'#main'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">equal<span class="token punctuation">(</span></span><span class="token keyword">typeof</span> result<span class="token punctuation">,</span> <span class="token string">"object"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">equal<span class="token punctuation">(</span></span>result<span class="token punctuation">.</span>status<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>assert<span class="token punctuation">.</span><span class="token function">equal<span class="token punctuation">(</span></span>result<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
</div>
  
  </div>  <!-- end .apimethod -->
  
      <div class="apimethod">
    <h3 id="maximizeWindow"><a href="http://nightwatchjs.org/api/maximizeWindow.html"><code>maximizeWindow</code></a> <span class="since optional">since v0.5.13</span></h3>
    

    <p>Maximizes the current window.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
 <span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   browser<span class="token punctuation">.</span><span class="token function">maximizeWindow<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
</div>
  
  </div>  <!-- end .apimethod -->
  
      <div class="apimethod">
    <h3 id="moveToElement"><a href="http://nightwatchjs.org/api/moveToElement.html"><code>moveToElement</code></a></h3>
    

    <p>Move the mouse by an offset of the specified element. Uses <code>moveTo</code> protocol command.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>selector</code></td>
           <td>string</td>
           <td>The CSS/Xpath selector used to locate the element.</td>
         </tr>
         
         <tr>
           <td><code>xoffset</code></td>
           <td>number</td>
           <td>X offset to move to, relative to the top-left corner of the element.</td>
         </tr>
         
         <tr>
           <td><code>yoffset</code></td>
           <td>number</td>
           <td>Y offset to move to, relative to the top-left corner of the element.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  browser<span class="token punctuation">.</span><span class="token function">moveToElement<span class="token punctuation">(</span></span><span class="token string">'#main'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
</div>
  
  </div>  <!-- end .apimethod -->
  
      <div class="apimethod">
    <h3 id="pause"><a href="http://nightwatchjs.org/api/pause.html"><code>pause</code></a></h3>
    

    <p>Suspends the test for the given time in milliseconds. If the milliseconds argument is missing it will suspend the test indefinitely</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>ms</code></td>
           <td>number</td>
           <td>The number of milliseconds to wait.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  browser<span class="token punctuation">.</span><span class="token function">pause<span class="token punctuation">(</span></span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment" spellcheck="true"> // or suspend indefinitely
</span>  browser<span class="token punctuation">.</span><span class="token function">pause<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
</div>
  
  </div>  <!-- end .apimethod -->
  
      <div class="apimethod">
    <h3 id="perform"><a href="http://nightwatchjs.org/api/perform.html"><code>perform</code></a></h3>
    

    <p>A simple perform command which allows access to the "api" in a callback.<br>Can be useful if you want to read variables set by other commands.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td>the function to run as part of the queue; it is called with the &lt;code&gt;browser&lt;/code&gt; object as the first argument and optionally a &lt;code&gt;done&lt;/code&gt; callback in case of an async operation.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> elementValue<span class="token punctuation">;</span>
  browser
    <span class="token punctuation">.</span><span class="token function">getValue<span class="token punctuation">(</span></span><span class="token string">'.some-element'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      elementValue <span class="token operator">=</span> result<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
   <span class="token comment" spellcheck="true"> // other stuff going on ...
</span>    <span class="token punctuation">.</span><span class="token function">perform<span class="token punctuation">(</span></span><span class="token keyword">function</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log<span class="token punctuation">(</span></span><span class="token string">'elementValue'</span><span class="token punctuation">,</span> elementValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token comment" spellcheck="true"> // potentially other async stuff going on
</span>     <span class="token comment" spellcheck="true"> // on finished, call the done callback
</span>      <span class="token function">done<span class="token punctuation">(</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
</div>
  
  </div>  <!-- end .apimethod -->
  
      <div class="apimethod">
    <h3 id="resizeWindow"><a href="http://nightwatchjs.org/api/resizeWindow.html"><code>resizeWindow</code></a> <span class="since optional">since v0.3.0</span></h3>
    

    <p>Resizes the current window.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>width</code></td>
           <td>number</td>
           <td>The new window width.</td>
         </tr>
         
         <tr>
           <td><code>height</code></td>
           <td>number</td>
           <td>The new window height.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
 <span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   browser<span class="token punctuation">.</span><span class="token function">resizeWindow<span class="token punctuation">(</span></span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
</div>
  
  </div>  <!-- end .apimethod -->
  
      <div class="apimethod">
    <h3 id="saveScreenshot"><a href="http://nightwatchjs.org/api/saveScreenshot.html"><code>saveScreenshot</code></a></h3>
    

    <p>Take a screenshot of the current page and saves it as the given filename.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>fileName</code></td>
           <td>string</td>
           <td>The complete path to the file name where the screenshot should be saved.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
 <span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   browser<span class="token punctuation">.</span><span class="token function">saveScreenshot<span class="token punctuation">(</span></span><span class="token string">'/path/to/fileName.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
</div>
  
  </div>  <!-- end .apimethod -->
  
      <div class="apimethod">
    <h3 id="setCookie"><a href="http://nightwatchjs.org/api/setCookie.html"><code>setCookie</code></a> <span class="since optional">since v0.4.0</span></h3>
    

    <p>Set a cookie, specified as a cookie JSON object, as defined <a href="https://code.google.com/p/selenium/wiki/JsonWireProtocol#Cookie_JSON_Object">here</a>.</p>

<p>Uses <code>cookie</code> protocol command.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>cookie</code></td>
           <td>object</td>
           <td>The cookie object.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  browser<span class="token punctuation">.</span><span class="token function">setCookie<span class="token punctuation">(</span></span><span class="token punctuation">{</span>
    name     <span class="token punctuation">:</span> <span class="token string">"test_cookie"</span><span class="token punctuation">,</span>
    value    <span class="token punctuation">:</span> <span class="token string">"test_value"</span><span class="token punctuation">,</span>
    path     <span class="token punctuation">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>Optional<span class="token punctuation">)</span>
    domain   <span class="token punctuation">:</span> <span class="token string">"example.org"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>Optional<span class="token punctuation">)</span>
    secure   <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>Optional<span class="token punctuation">)</span>
    httpOnly <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true"> // (Optional)
</span>    expiry   <span class="token punctuation">:</span> <span class="token number">1395002765</span><span class="token comment" spellcheck="true"> // (Optional) time in seconds since midnight, January 1, 1970 UTC
</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
</div>
  
  </div>  <!-- end .apimethod -->
  
      <div class="apimethod">
    <h3 id="setValue"><a href="http://nightwatchjs.org/api/setValue.html"><code>setValue</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidelementidvalue" target="_blank">sessionsessionidelementidvalue</a></code></p>
    

    <p>Sends some text to an element. Can be used to set the value of a form element or to send a sequence of key strokes to an element. Any UTF-8 character may be specified.</p>

<p>An object map with available keys and their respective UTF-8 characters, as defined on <a href="http://www.w3.org/TR/webdriver/#character-types">W3C WebDriver draft spec</a>, is loaded onto the main Nightwatch instance as <code>client.Keys</code>.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>selector</code></td>
           <td>string</td>
           <td>The CSS/Xpath selector used to locate the element.</td>
         </tr>
         
         <tr>
           <td><code>value</code></td>
           <td>string|array</td>
           <td>The text to send to the element or key strokes.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript"><span class="token comment" spellcheck="true">
// send some simple text to an input
</span><span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  browser<span class="token punctuation">.</span><span class="token function">setValue<span class="token punctuation">(</span></span><span class="token string">'input[type=text]'</span><span class="token punctuation">,</span> <span class="token string">'nightwatch'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">
//
</span><span class="token comment" spellcheck="true">// send some text to an input and hit enter.
</span><span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  browser<span class="token punctuation">.</span><span class="token function">setValue<span class="token punctuation">(</span></span><span class="token string">'input[type=text]'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'nightwatch'</span><span class="token punctuation">,</span> browser<span class="token punctuation">.</span>Keys<span class="token punctuation">.</span>ENTER<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
</div>
  
  </div>  <!-- end .apimethod -->
  
      <div class="apimethod">
    <h3 id="setWindowPosition"><a href="http://nightwatchjs.org/api/setWindowPosition.html"><code>setWindowPosition</code></a> <span class="since optional">since v0.8.18</span></h3>
    

    <p>Sets the current window position.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>offsetX</code></td>
           <td>number</td>
           <td>The new window offset x-position.</td>
         </tr>
         
         <tr>
           <td><code>offsetY</code></td>
           <td>number</td>
           <td>The new window offset y-position.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
 <span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   browser<span class="token punctuation">.</span><span class="token function">setWindowPosition<span class="token punctuation">(</span></span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
</div>
  
  </div>  <!-- end .apimethod -->
  
      <div class="apimethod">
    <h3 id="submitForm"><a href="http://nightwatchjs.org/api/submitForm.html"><code>submitForm</code></a></h3>
    

    <p>Submit a FORM element. The submit command may also be applied to any element that is a descendant of a FORM element. Uses <code>submit</code> protocol command.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>selector</code></td>
           <td>string</td>
           <td>The CSS/Xpath selector used to locate the element.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  browser<span class="token punctuation">.</span><span class="token function">submitForm<span class="token punctuation">(</span></span><span class="token string">'form.login'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
</div>
  
  </div>  <!-- end .apimethod -->
  
      <div class="apimethod">
    <h3 id="switchWindow"><a href="http://nightwatchjs.org/api/switchWindow.html"><code>switchWindow</code></a> <span class="since optional">since v0.3.0</span></h3>
    

    <p>Change focus to another window. The window to change focus to may be specified by its server assigned window handle, or by the value of its name attribute.</p>

<p>To find out the window handle use <code>window_handles</code> protocol action</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>handleOrName</code></td>
           <td>string</td>
           <td>The server assigned window handle or the name attribute.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
 <span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   browser<span class="token punctuation">.</span><span class="token function">window_handles<span class="token punctuation">(</span></span><span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">var</span> handle <span class="token operator">=</span> result<span class="token punctuation">.</span>value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
     browser<span class="token punctuation">.</span><span class="token function">switchWindow<span class="token punctuation">(</span></span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
</div>
  
  </div>  <!-- end .apimethod -->
  
      <div class="apimethod">
    <h3 id="urlHash"><a href="http://nightwatchjs.org/api/urlHash.html"><code>urlHash</code></a> <span class="since optional">since v0.4.0</span></h3>
    

    <p>Convenience method that adds the specified hash (i.e. url fragment) to the current value of the <code>launch_url</code> as set in <code>nightwatch.json</code>.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>hash</code></td>
           <td>string</td>
           <td>The hash to add/replace to the current url (i.e. the value set in the launch_url property in nightwatch.json).</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>client<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  client<span class="token punctuation">.</span><span class="token function">urlHash<span class="token punctuation">(</span></span><span class="token string">'#hashvalue'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment" spellcheck="true"> // or
</span>  client<span class="token punctuation">.</span><span class="token function">urlHash<span class="token punctuation">(</span></span><span class="token string">'hashvalue'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
</div>
  
  </div>  <!-- end .apimethod -->
  
      <div class="apimethod">
    <h3 id="waitForElementNotPresent"><a href="http://nightwatchjs.org/api/waitForElementNotPresent.html"><code>waitForElementNotPresent</code></a> <span class="since optional">since v0.4.0</span></h3>
    

    <p>Opposite of <code>waitForElementPresent</code>. Waits a given time in milliseconds for an element to be not present (i.e. removed) in the page before performing any other commands or assertions.</p>

<p>If the element is still present after the specified amount of time, the test fails.</p>

<p>You can change the polling interval by defining a <code>waitForConditionPollInterval</code> property (in milliseconds) in as a global property in your <code>nightwatch.json</code> or in your external globals file.</p>

<p>Similarly, a default timeout can be specified as a global <code>waitForConditionTimeout</code> property (in milliseconds).</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>selector</code></td>
           <td>string</td>
           <td>The selector (CSS / Xpath) used to locate the element.</td>
         </tr>
         
         <tr>
           <td><code>time</code></td>
           <td>number</td>
           <td>The number of milliseconds to wait. The runner performs repeated checks every 500 ms.</td>
         </tr>
         
         <tr>
           <td><code>abortOnFailure</code><br><span class="optional">Optional</span></td>
           <td>boolean</td>
           <td>By the default if the element is not found the test will fail. Set this to false if you wish for the test to continue even if the assertion fails. To set this globally you can define a property `abortOnAssertionFailure` in your globals.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
         <tr>
           <td><code>message</code><br><span class="optional">Optional</span></td>
           <td>string</td>
           <td>Optional message to be shown in the output; the message supports two placeholders: %s for current selector and %d for the time (e.g. Element %s was not in the page for %d ms).</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  browser<span class="token punctuation">.</span><span class="token function">waitForElementNotPresent<span class="token punctuation">(</span></span><span class="token string">'#dialog'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
</div>
  
  </div>  <!-- end .apimethod -->
  
      <div class="apimethod">
    <h3 id="waitForElementNotVisible"><a href="http://nightwatchjs.org/api/waitForElementNotVisible.html"><code>waitForElementNotVisible</code></a> <span class="since optional">since v0.4.0</span></h3>
    

    <p>Opposite of <code>waitForElementVisible</code>. Waits a given time in milliseconds for an element to be not visible (i.e. hidden but existing) in the page before performing any other commands or assertions.</p>

<p>If the element fails to be hidden in the specified amount of time, the test fails.</p>

<p>You can change the polling interval by defining a <code>waitForConditionPollInterval</code> property (in milliseconds) in as a global property in your <code>nightwatch.json</code> or in your external globals file.</p>

<p>Similarly, a default timeout can be specified as a global <code>waitForConditionTimeout</code> property (in milliseconds).</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>selector</code></td>
           <td>string</td>
           <td>The selector (CSS / Xpath) used to locate the element.</td>
         </tr>
         
         <tr>
           <td><code>time</code></td>
           <td>number</td>
           <td>The number of milliseconds to wait. The runner performs repeated checks every 500 ms.</td>
         </tr>
         
         <tr>
           <td><code>abortOnFailure</code><br><span class="optional">Optional</span></td>
           <td>boolean</td>
           <td>By the default if the element is not found the test will fail. Set this to false if you wish for the test to continue even if the assertion fails. To set this globally you can define a property `abortOnAssertionFailure` in your globals.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
         <tr>
           <td><code>message</code><br><span class="optional">Optional</span></td>
           <td>string</td>
           <td>Optional message to be shown in the output; the message supports two placeholders: %s for current selector and %d for the time (e.g. Element %s was not in the page for %d ms).</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  browser<span class="token punctuation">.</span><span class="token function">waitForElementNotVisible<span class="token punctuation">(</span></span><span class="token string">'#dialog'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
</div>
  
  </div>  <!-- end .apimethod -->
  
      <div class="apimethod">
    <h3 id="waitForElementPresent"><a href="http://nightwatchjs.org/api/waitForElementPresent.html"><code>waitForElementPresent</code></a></h3>
    

    <p>Waits a given time in milliseconds for an element to be present in the page before performing any other commands or assertions.</p>

<p>If the element fails to be present in the specified amount of time, the test fails. You can change this by setting <code>abortOnFailure</code> to <code>false</code>.</p>

<p>You can change the polling interval by defining a <code>waitForConditionPollInterval</code> property (in milliseconds) in as a global property in your <code>nightwatch.json</code> or in your external globals file.</p>

<p>Similarly, a default timeout can be specified as a global <code>waitForConditionTimeout</code> property (in milliseconds).</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>selector</code></td>
           <td>string</td>
           <td>The selector (CSS / Xpath) used to locate the element.</td>
         </tr>
         
         <tr>
           <td><code>time</code></td>
           <td>number</td>
           <td>The number of milliseconds to wait. The runner performs repeated checks every 500 ms.</td>
         </tr>
         
         <tr>
           <td><code>abortOnFailure</code><br><span class="optional">Optional</span></td>
           <td>boolean</td>
           <td>By the default if the element is not found the test will fail. Set this to false if you wish for the test to continue even if the assertion fails. To set this globally you can define a property `abortOnAssertionFailure` in your globals.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
         <tr>
           <td><code>message</code><br><span class="optional">Optional</span></td>
           <td>string</td>
           <td>Optional message to be shown in the output; the message supports two placeholders: %s for current selector and %d for the time (e.g. Element %s was not in the page for %d ms).</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  browser<span class="token punctuation">.</span><span class="token function">waitForElementPresent<span class="token punctuation">(</span></span><span class="token string">'body'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment" spellcheck="true"> // continue if failed
</span>  browser<span class="token punctuation">.</span><span class="token function">waitForElementPresent<span class="token punctuation">(</span></span><span class="token string">'body'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment" spellcheck="true"> // with callback
</span>  browser<span class="token punctuation">.</span><span class="token function">waitForElementPresent<span class="token punctuation">(</span></span><span class="token string">'body'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment" spellcheck="true"> // do something while we're here
</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment" spellcheck="true"> // custom Spanish message
</span>  browser<span class="token punctuation">.</span><span class="token function">waitForElementPresent<span class="token punctuation">(</span></span><span class="token string">'body'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token string">'elemento %s no era presente en %d ms'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment" spellcheck="true"> // many combinations possible - the message is always the last argument
</span>  browser<span class="token punctuation">.</span><span class="token function">waitForElementPresent<span class="token punctuation">(</span></span><span class="token string">'body'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">'elemento %s no era presente en %d ms'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
</div>
  
  </div>  <!-- end .apimethod -->
  
      <div class="apimethod">
    <h3 id="waitForElementVisible"><a href="http://nightwatchjs.org/api/waitForElementVisible.html"><code>waitForElementVisible</code></a></h3>
    

    <p>Waits a given time in milliseconds for an element to be visible in the page before performing any other commands or assertions.</p>

<p>If the element fails to be present and visible in the specified amount of time, the test fails. You can change this by setting <code>abortOnFailure</code> to <code>false</code>.</p>

<p>You can change the polling interval by defining a <code>waitForConditionPollInterval</code> property (in milliseconds) in as a global property in your <code>nightwatch.json</code> or in your external globals file.</p>

<p>Similarly, a default timeout can be specified as a global <code>waitForConditionTimeout</code> property (in milliseconds).</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>selector</code></td>
           <td>string</td>
           <td>The selector (CSS / Xpath) used to locate the element.</td>
         </tr>
         
         <tr>
           <td><code>time</code></td>
           <td>number</td>
           <td>The number of milliseconds to wait. The runner performs repeated checks every 500 ms.</td>
         </tr>
         
         <tr>
           <td><code>abortOnFailure</code><br><span class="optional">Optional</span></td>
           <td>boolean</td>
           <td>By the default if the element is not found the test will fail. Set this to false if you wish for the test to continue even if the assertion fails. To set this globally you can define a property `abortOnAssertionFailure` in your globals.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
         <tr>
           <td><code>message</code><br><span class="optional">Optional</span></td>
           <td>string</td>
           <td>Optional message to be shown in the output; the message supports two placeholders: %s for current selector and %d for the time (e.g. Element %s was not in the page for %d ms).</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
<span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  browser<span class="token punctuation">.</span><span class="token function">waitForElementVisible<span class="token punctuation">(</span></span><span class="token string">'body'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment" spellcheck="true"> // continue if failed
</span>  browser<span class="token punctuation">.</span><span class="token function">waitForElementVisible<span class="token punctuation">(</span></span><span class="token string">'body'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment" spellcheck="true"> // with callback
</span>  browser<span class="token punctuation">.</span><span class="token function">waitForElementVisible<span class="token punctuation">(</span></span><span class="token string">'body'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment" spellcheck="true"> // do something while we're here
</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment" spellcheck="true"> // custom Spanish message
</span>  browser<span class="token punctuation">.</span><span class="token function">waitForElementVisible<span class="token punctuation">(</span></span><span class="token string">'body'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token string">'elemento %s no era visible en %d ms'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment" spellcheck="true"> // many combinations possible - the message is always the last argument
</span>  browser<span class="token punctuation">.</span><span class="token function">waitForElementVisible<span class="token punctuation">(</span></span><span class="token string">'body'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">'elemento %s no era visible en %d ms'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
</div>
  
  </div>  <!-- end .apimethod -->
  
  </div>
    <!-- ============================================================
    // END Commands
    ============================================================ -->

  </div>

  <div class="docs-section">
    <div class="page-header">
      <h2 id="protocol">Selenium Protocol</h2>
    </div>
    <p>The protocol commands are most of the times simple mappings to the <a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol" target="_blank">Selenium JsonWireProtocol</a> endpoints.</p>
    <p>Some of them are basic commands (such as <code>url</code> and <code>execute</code>) and others are internal commands being used by Nightwatch commands and assertions.</p>
    <p>Implementation of the Selenium commands is incomplete however and still a work in progress.</p>
  <!-- ============================================================
    // Protocol commands
    ============================================================ -->
  <div class="protocolcommands">
  
  <div class="apimethod">
    <h3 id="acceptAlert"><a href="http://nightwatchjs.org/api/acceptAlert.html"><code>acceptAlert</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidaccept_alert" target="_blank">/session/:sessionId/accept_alert</a></code></p>
    

    <p>Accepts the currently displayed alert dialog. Usually, this is equivalent to clicking on the 'OK' button in the dialog.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="back"><a href="http://nightwatchjs.org/api/back.html"><code>back</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidback" target="_blank">/session/:sessionId/back</a></code></p>
    

    <p>Navigate backwards in the browser history, if possible.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="contexts"><a href="http://nightwatchjs.org/api/contexts.html"><code>contexts</code></a></h3>
    

    <p>Get a list of the available contexts.</p>

<p>Used by Appium when testing hybrid mobile web apps. More info here: <a href="https://github.com/appium/appium/blob/master/docs/en/advanced-concepts/hybrid.md">https://github.com/appium/appium/blob/master/docs/en/advanced-concepts/hybrid.md</a>.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td>Callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    <h5>Returns</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 200px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         <tr>
           <td>Array</td>
           <td> an array of strings representing available contexts, e.g 'WEBVIEW', or 'NATIVE'</td>
         </tr>
        </tbody>
      </table>
    </div>
    
    
  </div>
  
  <div class="apimethod">
    <h3 id="cookie"><a href="http://nightwatchjs.org/api/cookie.html"><code>cookie</code></a> <span class="since optional">since v0.4.0</span></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidcookie" target="_blank">/session/:sessionId/cookie</a></code></p>
    

    <p>Retrieve or delete all cookies visible to the current page or set a cookie.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>method</code></td>
           <td>string</td>
           <td>Http method</td>
         </tr>
         
         <tr>
           <td><code>callbackOrCookie</code><br><span class="optional">Optional</span></td>
           <td>function|object</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="currentContext"><a href="http://nightwatchjs.org/api/currentContext.html"><code>currentContext</code></a></h3>
    

    <p>Get current context.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td>Callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    <h5>Returns</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 200px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         <tr>
           <td>string|null</td>
           <td> a string representing the current context or `null`, representing "no context"</td>
         </tr>
        </tbody>
      </table>
    </div>
    
    
  </div>
  
  <div class="apimethod">
    <h3 id="dismissAlert"><a href="http://nightwatchjs.org/api/dismissAlert.html"><code>dismissAlert</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessioniddismiss_alert" target="_blank">/session/:sessionId/dismiss_alert</a></code></p>
    

    <p>Dismisses the currently displayed alert dialog. For confirm() and prompt() dialogs, this is equivalent to clicking the 'Cancel' button.</p>

<p>For alert() dialogs, this is equivalent to clicking the 'OK' button.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="doubleClick"><a href="http://nightwatchjs.org/api/doubleClick.html"><code>doubleClick</code></a></h3>
    

    <p>Double-clicks at the current mouse coordinates (set by moveto).</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="element"><a href="http://nightwatchjs.org/api/element.html"><code>element</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidelement" target="_blank">/session/:sessionId/element</a></code></p>
    

    <p>Search for an element on the page, starting from the document root. The located element will be returned as a WebElement JSON object.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>using</code></td>
           <td>string</td>
           <td>The locator strategy to use.</td>
         </tr>
         
         <tr>
           <td><code>value</code></td>
           <td>string</td>
           <td>The search target.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="elementActive"><a href="http://nightwatchjs.org/api/elementActive.html"><code>elementActive</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidelementactive" target="_blank">/session/:sessionId/element/active</a></code></p>
    

    <p>Get the element on the page that currently has focus.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="elementIdAttribute"><a href="http://nightwatchjs.org/api/elementIdAttribute.html"><code>elementIdAttribute</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidelementidattributename" target="_blank">/session/:sessionId/element/:id/attribute/:name</a></code></p>
    

    <p>Get the value of an element's attribute.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>id</code></td>
           <td>string</td>
           <td>ID of the element to route the command to.</td>
         </tr>
         
         <tr>
           <td><code>attributeName</code></td>
           <td>string</td>
           <td>The attribute name</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="elementIdClear"><a href="http://nightwatchjs.org/api/elementIdClear.html"><code>elementIdClear</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidelementidclear" target="_blank">/session/:sessionId/element/:id/clear</a></code></p>
    

    <p>Clear a TEXTAREA or text INPUT element's value.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>id</code></td>
           <td>string</td>
           <td>ID of the element to route the command to.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="elementIdClick"><a href="http://nightwatchjs.org/api/elementIdClick.html"><code>elementIdClick</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidelementidclick" target="_blank">/session/:sessionId/element/:id/click</a></code></p>
    

    <p>Click on an element.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>id</code></td>
           <td>string</td>
           <td>ID of the element to route the command to.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="elementIdCssProperty"><a href="http://nightwatchjs.org/api/elementIdCssProperty.html"><code>elementIdCssProperty</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidelementidcsspropertyname" target="_blank">/session/:sessionId/element/:id/css/:propertyName</a></code></p>
    

    <p>Query the value of an element's computed CSS property.</p>

<p>The CSS property to query should be specified using the CSS property name, not the JavaScript property name (e.g. background-color instead of backgroundColor).</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>id</code></td>
           <td>string</td>
           <td>ID of the element to route the command to.</td>
         </tr>
         
         <tr>
           <td><code>cssPropertyName</code></td>
           <td>string</td>
           <td></td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="elementIdDisplayed"><a href="http://nightwatchjs.org/api/elementIdDisplayed.html"><code>elementIdDisplayed</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidelementiddisplayed" target="_blank">/session/:sessionId/element/:id/displayed</a></code></p>
    

    <p>Determine if an element is currently displayed.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>id</code></td>
           <td>string</td>
           <td>ID of the element to route the command to.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="elementIdElement"><a href="http://nightwatchjs.org/api/elementIdElement.html"><code>elementIdElement</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidelementidelement" target="_blank">/session/:sessionId/element/:id/element</a></code></p>
    

    <p>Search for an element on the page, starting from the identified element. The located element will be returned as a WebElement JSON object.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>id</code></td>
           <td>string</td>
           <td>ID of the element to route the command to.</td>
         </tr>
         
         <tr>
           <td><code>using</code></td>
           <td>string</td>
           <td>The locator strategy to use.</td>
         </tr>
         
         <tr>
           <td><code>value</code></td>
           <td>string</td>
           <td>The search target.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="elementIdElements"><a href="http://nightwatchjs.org/api/elementIdElements.html"><code>elementIdElements</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidelementidelements" target="_blank">/session/:sessionId/element/:id/elements</a></code></p>
    

    <p>Search for multiple elements on the page, starting from the identified element. The located element will be returned as a WebElement JSON objects.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>id</code></td>
           <td>string</td>
           <td>ID of the element to route the command to.</td>
         </tr>
         
         <tr>
           <td><code>using</code></td>
           <td>string</td>
           <td>The locator strategy to use.</td>
         </tr>
         
         <tr>
           <td><code>value</code></td>
           <td>string</td>
           <td>The search target.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="elementIdEnabled"><a href="http://nightwatchjs.org/api/elementIdEnabled.html"><code>elementIdEnabled</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidelementidenabled" target="_blank">/session/:sessionId/element/:id/enabled</a></code></p>
    

    <p>Determine if an element is currently enabled.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>id</code></td>
           <td>string</td>
           <td>ID of the element to route the command to.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="elementIdEquals"><a href="http://nightwatchjs.org/api/elementIdEquals.html"><code>elementIdEquals</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidelementidequalsother" target="_blank">/session/:sessionId/element/:id/equals/:other</a></code></p>
    

    <p>Test if two element IDs refer to the same DOM element.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>id</code></td>
           <td>string</td>
           <td>ID of the element to route the command to.</td>
         </tr>
         
         <tr>
           <td><code>otherId</code></td>
           <td>string</td>
           <td>ID of the element to compare against.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="elementIdLocation"><a href="http://nightwatchjs.org/api/elementIdLocation.html"><code>elementIdLocation</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidelementidlocation" target="_blank">/session/:sessionId/element/:id/location</a></code></p>
    

    <p>Determine an element's location on the page. The point (0, 0) refers to the upper-left corner of the page.</p>

<p>The element's coordinates are returned as a JSON object with x and y properties.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>id</code></td>
           <td>string</td>
           <td>ID of the element to route the command to.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    <h5>Returns</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 200px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         <tr>
           <td>x:number, y:number</td>
           <td> The X and Y coordinates for the element on the page.</td>
         </tr>
        </tbody>
      </table>
    </div>
    
    
  </div>
  
  <div class="apimethod">
    <h3 id="elementIdLocationInView"><a href="http://nightwatchjs.org/api/elementIdLocationInView.html"><code>elementIdLocationInView</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidelementidlocation_in_view" target="_blank">/session/:sessionId/element/:id/location_in_view</a></code></p>
    

    <p>Determine an element's location on the screen once it has been scrolled into view.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>id</code></td>
           <td>string</td>
           <td>ID of the element to route the command to.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="elementIdName"><a href="http://nightwatchjs.org/api/elementIdName.html"><code>elementIdName</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidelementidname" target="_blank">/session/:sessionId/element/:id/name</a></code></p>
    

    <p>Query for an element's tag name.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>id</code></td>
           <td>string</td>
           <td>ID of the element to route the command to.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="elementIdSelected"><a href="http://nightwatchjs.org/api/elementIdSelected.html"><code>elementIdSelected</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidelementidselected" target="_blank">/session/:sessionId/element/:id/selected</a></code></p>
    

    <p>Determine if an OPTION element, or an INPUT element of type checkbox or radio button is currently selected.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>id</code></td>
           <td>string</td>
           <td>ID of the element to route the command to.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="elementIdSize"><a href="http://nightwatchjs.org/api/elementIdSize.html"><code>elementIdSize</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidelementidsize" target="_blank">/session/:sessionId/element/:id/size</a></code></p>
    

    <p>Determine an element's size in pixels. The size will be returned as a JSON object with width and height properties.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>id</code></td>
           <td>string</td>
           <td>ID of the element to route the command to.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="elementIdText"><a href="http://nightwatchjs.org/api/elementIdText.html"><code>elementIdText</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidelementidtext" target="_blank">/session/:sessionId/element/:id/text</a></code></p>
    

    <p>Returns the visible text for the element.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>id</code></td>
           <td>string</td>
           <td>ID of the element to route the command to.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="elementIdValue"><a href="http://nightwatchjs.org/api/elementIdValue.html"><code>elementIdValue</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidelementidvalue" target="_blank">/session/:sessionId/element/:id/value</a></code></p>
    

    <p>Send a sequence of key strokes to an element or returns the current value of the element.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>id</code></td>
           <td>string</td>
           <td>ID of the element to route the command to.</td>
         </tr>
         
         <tr>
           <td><code>value</code><br><span class="optional">Optional</span></td>
           <td>string|array|none</td>
           <td>Value to send to element in case of a POST</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="elements"><a href="http://nightwatchjs.org/api/elements.html"><code>elements</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidelements" target="_blank">/session/:sessionId/elements</a></code></p>
    

    <p>Search for multiple elements on the page, starting from the document root. The located elements will be returned as a WebElement JSON objects.<br>Valid strings to use as locator strategies are: "class name", "css selector", "id", "name", "link text", "partial link text", "tag name", "xpath"</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>using</code></td>
           <td>string</td>
           <td>The locator strategy to use.</td>
         </tr>
         
         <tr>
           <td><code>value</code></td>
           <td>string</td>
           <td>The search target.</td>
         </tr>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td>Callback function to be invoked with the result when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="execute"><a href="http://nightwatchjs.org/api/execute.html"><code>execute</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidexecute" target="_blank">/session/:sessionId/execute</a></code></p>
    

    <p>Inject a snippet of JavaScript into the page for execution in the context of the currently selected frame. The executed script is assumed to be synchronous and the result of evaluating the script is returned to the client.<br>The script argument defines the script to execute in the form of a function body. The value returned by that function will be returned to the client.</p>

<p>The function will be invoked with the  provided args array and the values may be accessed via the arguments object in the order specified.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>body</code></td>
           <td>string|function</td>
           <td>The function body to be injected.</td>
         </tr>
         
         <tr>
           <td><code>args</code></td>
           <td>Array</td>
           <td>An array of arguments which will be passed to the function.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    <h5>Returns</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 200px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         <tr>
           <td>*</td>
           <td> The script result.</td>
         </tr>
        </tbody>
      </table>
    </div>
    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
 <span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   browser<span class="token punctuation">.</span><span class="token function">execute<span class="token punctuation">(</span></span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true"> // resize operation
</span>     <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>imagedata<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
</div>
  
  </div>
  
  <div class="apimethod">
    <h3 id="executeAsync"><a href="http://nightwatchjs.org/api/executeAsync.html"><code>executeAsync</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidexecute_async" target="_blank">/session/:sessionId/execute_async</a></code></p>
    

    <p>Inject a snippet of JavaScript into the page for execution in the context of the currently selected frame. The executed script is assumed to be asynchronous and the result of evaluating the script is returned to the client.</p>

<p>Asynchronous script commands may not span page loads. If an unload event is fired while waiting for a script result, an error should be returned to the client.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>script</code></td>
           <td>string|function</td>
           <td>The function body to be injected.</td>
         </tr>
         
         <tr>
           <td><code>args</code></td>
           <td>Array</td>
           <td>An array of arguments which will be passed to the function.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    <h5>Returns</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 200px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         <tr>
           <td>*</td>
           <td> The script result.</td>
         </tr>
        </tbody>
      </table>
    </div>
    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript" class=" language-javascript"><code class=" language-javascript">
 <span class="token keyword">this</span><span class="token punctuation">.</span>demoTest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   browser<span class="token punctuation">.</span><span class="token function">executeAsync<span class="token punctuation">(</span></span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token function">someAsyncOperation<span class="token punctuation">(</span></span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token function">done<span class="token punctuation">(</span></span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>imagedata<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true"> // ...
</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
</div>
  
  </div>
  
  <div class="apimethod">
    <h3 id="forward"><a href="http://nightwatchjs.org/api/forward.html"><code>forward</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidback" target="_blank">/session/:sessionId/back</a></code></p>
    

    <p>Navigate forwards in the browser history, if possible.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="frame"><a href="http://nightwatchjs.org/api/frame.html"><code>frame</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidframe" target="_blank">/session/:sessionId/frame</a></code></p>
    

    <p>Change focus to another frame on the page. If the frame id is missing or null, the server should switch to the page's default content.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>frameId</code><br><span class="optional">Optional</span></td>
           <td>string|number|null</td>
           <td>Identifier for the frame to change focus to.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="frameParent"><a href="http://nightwatchjs.org/api/frameParent.html"><code>frameParent</code></a> <span class="since optional">since v0.4.8</span></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidframeparent" target="_blank">/session/:sessionId/frame/parent</a></code></p>
    

    <p>Change focus to the parent context. If the current context is the top level browsing context, the context remains unchanged.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="getAlertText"><a href="http://nightwatchjs.org/api/getAlertText.html"><code>getAlertText</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidalert_text" target="_blank">/session/:sessionId/alert_text</a></code></p>
    

    <p>Gets the text of the currently displayed JavaScript alert(), confirm(), or prompt() dialog.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    <h5>Returns</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 200px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         <tr>
           <td>string</td>
           <td> The text of the currently displayed alert.</td>
         </tr>
        </tbody>
      </table>
    </div>
    
    
  </div>
  
  <div class="apimethod">
    <h3 id="getOrientation"><a href="http://nightwatchjs.org/api/getOrientation.html"><code>getOrientation</code></a></h3>
    

    <p>Get the current browser orientation.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td>Callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    <h5>Returns</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 200px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         <tr>
           <td>string} The current browser orientation: {LANDSCAPE|PORTRAIT</td>
           <td></td>
         </tr>
        </tbody>
      </table>
    </div>
    
    
  </div>
  
  <div class="apimethod">
    <h3 id="keys"><a href="http://nightwatchjs.org/api/keys.html"><code>keys</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidkeys" target="_blank">/session/:sessionId/keys</a></code></p>
    

    <p>Send a sequence of key strokes to the active element. The sequence is defined in the same format as the <code>sendKeys</code> command.<br>An object map with available keys and their respective UTF-8 characters, as defined on <a href="http://www.w3.org/TR/webdriver/#character-types">W3C WebDriver draft spec</a>, is loaded onto the main Nightwatch instance as <code>client.Keys</code>.</p>

<p>Rather than the <code>setValue</code>, the modifiers are not released at the end of the call. The state of the modifier keys is kept between calls, so mouse interactions can be performed while modifier keys are depressed.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>keysToSend</code></td>
           <td>Array</td>
           <td>The keys sequence to be sent.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="mouseButtonClick"><a href="http://nightwatchjs.org/api/mouseButtonClick.html"><code>mouseButtonClick</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidclick" target="_blank">/session/:sessionId/click</a></code></p>
    

    <p>Click at the current mouse coordinates (set by moveto).</p>

<p>The button can be (0, 1, 2) or ('left', 'middle', 'right'). It defaults to left mouse button, and if you don't pass in a button but do pass in a callback, it will handle it correctly.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>button</code></td>
           <td>string|number</td>
           <td>The mouse button</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="mouseButtonDown"><a href="http://nightwatchjs.org/api/mouseButtonDown.html"><code>mouseButtonDown</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidbuttondown" target="_blank">/session/:sessionId/buttondown</a></code></p>
    

    <p>Click and hold the left mouse button (at the coordinates set by the last moveto command). Note that the next mouse-related command that should follow is <code>mouseButtonUp</code> . Any other mouse command (such as click or another call to buttondown) will yield undefined behaviour.</p>

<p>Can be used for implementing drag-and-drop. The button can be (0, 1, 2) or ('left', 'middle', 'right'). It defaults to left mouse button, and if you don't pass in a button but do pass in a callback, it will handle it correctly.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>button</code></td>
           <td>string|number</td>
           <td>The mouse button</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="mouseButtonUp"><a href="http://nightwatchjs.org/api/mouseButtonUp.html"><code>mouseButtonUp</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidbuttonup" target="_blank">/session/:sessionId/buttonup</a></code></p>
    

    <p>Releases the mouse button previously held (where the mouse is currently at). Must be called once for every <code>mouseButtonDown</code> command issued.</p>

<p>Can be used for implementing drag-and-drop. The button can be (0, 1, 2) or ('left', 'middle', 'right'). It defaults to left mouse button, and if you don't pass in a button but do pass in a callback, it will handle it correctly.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>button</code></td>
           <td>string|number</td>
           <td>The mouse button</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="moveTo"><a href="http://nightwatchjs.org/api/moveTo.html"><code>moveTo</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidmoveto" target="_blank">/session/:sessionId/moveto</a></code></p>
    

    <p>Move the mouse by an offset of the specificed element. If no element is specified, the move is relative to the current mouse cursor. If an element is provided but no offset, the mouse will be moved to the center of the element.</p>

<p>If the element is not visible, it will be scrolled into view.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>element</code></td>
           <td>string</td>
           <td>Opaque ID assigned to the element to move to. If not specified or is null, the offset is relative to current position of the mouse.</td>
         </tr>
         
         <tr>
           <td><code>xoffset</code></td>
           <td>number</td>
           <td>X offset to move to, relative to the top-left corner of the element. If not specified, the mouse will move to the middle of the element.</td>
         </tr>
         
         <tr>
           <td><code>yoffset</code></td>
           <td>number</td>
           <td>Y offset to move to, relative to the top-left corner of the element. If not specified, the mouse will move to the middle of the element.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="refresh"><a href="http://nightwatchjs.org/api/refresh.html"><code>refresh</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidrefresh" target="_blank">/session/:sessionId/refresh</a></code></p>
    

    <p>Refresh the current page.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="screenshot"><a href="http://nightwatchjs.org/api/screenshot.html"><code>screenshot</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidscreenshot" target="_blank">/session/:sessionId/screenshot</a></code></p>
    

    <p>Take a screenshot of the current page.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>log_screenshot_data</code></td>
           <td>boolean</td>
           <td>Whether or not the screenshot data should appear in the logs when running with --verbose</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="session"><a href="http://nightwatchjs.org/api/session.html"><code>session</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#session" target="_blank">/session</a></code></p>
    

    <p>Get info about, delete or create a new session. Defaults to the current session.</p>

<div class="highlight"><pre lang=""> this.demoTest = function (browser) {
   browser.session(function(result) {
     console.log(result.value);
   });

   browser.session('delete', function(result) {
     console.log(result.value);
   });

   browser.session('delete', '12345-abc', function(result) {
     console.log(result.value);
   });
 };
</pre></div>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>action</code><br><span class="optional">Optional</span></td>
           <td>string</td>
           <td>The http verb to use, can be "get", "post" or "delete". If only the callback is passed, get is assumed as default.</td>
         </tr>
         
         <tr>
           <td><code>sessionId</code><br><span class="optional">Optional</span></td>
           <td>string</td>
           <td>The id of the session to get info about or delete.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="sessionLog"><a href="http://nightwatchjs.org/api/sessionLog.html"><code>sessionLog</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidlog" target="_blank">/session/:sessionId/log</a></code></p>
    

    <p>Gets the text of the log type specified</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>typeString</code></td>
           <td>string</td>
           <td>Type of log to request</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    <h5>Returns</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 200px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         <tr>
           <td>Array</td>
           <td> Array of the text entries of the log.</td>
         </tr>
        </tbody>
      </table>
    </div>
    
    
  </div>
  
  <div class="apimethod">
    <h3 id="sessionLogTypes"><a href="http://nightwatchjs.org/api/sessionLogTypes.html"><code>sessionLogTypes</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidlogtypes" target="_blank">/session/:sessionId/log/types</a></code></p>
    

    <p>Gets an array of strings for which log types are available.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    <h5>Returns</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 200px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         <tr>
           <td>Array</td>
           <td> Available log types</td>
         </tr>
        </tbody>
      </table>
    </div>
    
    
  </div>
  
  <div class="apimethod">
    <h3 id="sessions"><a href="http://nightwatchjs.org/api/sessions.html"><code>sessions</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessions" target="_blank">/sessions</a></code></p>
    

    <p>Returns a list of the currently active sessions.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="setAlertText"><a href="http://nightwatchjs.org/api/setAlertText.html"><code>setAlertText</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidalert_text" target="_blank">/session/:sessionId/alert_text</a></code></p>
    

    <p>Sends keystrokes to a JavaScript prompt() dialog.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>value</code></td>
           <td>string</td>
           <td>Keystrokes to send to the prompt() dialog</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="setContext"><a href="http://nightwatchjs.org/api/setContext.html"><code>setContext</code></a></h3>
    

    <p>Sets the context.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>context</code></td>
           <td>string</td>
           <td>context name to switch to - a string representing an available context.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="setOrientation"><a href="http://nightwatchjs.org/api/setOrientation.html"><code>setOrientation</code></a></h3>
    

    <p>Sets the browser orientation.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>orientation</code></td>
           <td>string</td>
           <td>The new browser orientation: {LANDSCAPE|PORTRAIT}</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="source"><a href="http://nightwatchjs.org/api/source.html"><code>source</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidsource" target="_blank">/session/:sessionId/source</a></code></p>
    

    <p>Get the current page source.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="status"><a href="http://nightwatchjs.org/api/status.html"><code>status</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#status" target="_blank">/status</a></code></p>
    

    <p>Query the server's current status.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="submit"><a href="http://nightwatchjs.org/api/submit.html"><code>submit</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidelementidsubmit" target="_blank">/session/:sessionId/element/:id/submit</a></code></p>
    

    <p>Submit a FORM element. The submit command may also be applied to any element that is a descendant of a FORM element.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>id</code></td>
           <td>string</td>
           <td>ID of the element to route the command to.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="timeouts"><a href="http://nightwatchjs.org/api/timeouts.html"><code>timeouts</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidtimeouts" target="_blank">/session/:sessionId/timeouts</a></code></p>
    

    <p>Configure the amount of time that a particular type of operation can execute for before they are aborted and a |Timeout| error is returned to the client.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>type</code></td>
           <td>string</td>
           <td>The type of operation to set the timeout for. Valid values are: "script" for script timeouts, "implicit" for modifying the implicit wait timeout and "page load" for setting a page load timeout.</td>
         </tr>
         
         <tr>
           <td><code>ms</code></td>
           <td>number</td>
           <td>The amount of time, in milliseconds, that time-limited commands are permitted to run.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="timeoutsAsyncScript"><a href="http://nightwatchjs.org/api/timeoutsAsyncScript.html"><code>timeoutsAsyncScript</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidtimeoutsasync_script" target="_blank">/session/:sessionId/timeouts/async_script</a></code></p>
    

    <p>Set the amount of time, in milliseconds, that asynchronous scripts executed by /session/:sessionId/execute_async are permitted to run before they are aborted and a |Timeout| error is returned to the client.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>ms</code></td>
           <td>number</td>
           <td>The amount of time, in milliseconds, that time-limited commands are permitted to run.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="timeoutsImplicitWait"><a href="http://nightwatchjs.org/api/timeoutsImplicitWait.html"><code>timeoutsImplicitWait</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidtimeoutsimplicit_wait" target="_blank">/session/:sessionId/timeouts/implicit_wait</a></code></p>
    

    <p>Set the amount of time the driver should wait when searching for elements. If this command is never sent, the driver will default to an implicit wait of 0ms.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>ms</code></td>
           <td>number</td>
           <td>The amount of time, in milliseconds, that time-limited commands are permitted to run.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="title"><a href="http://nightwatchjs.org/api/title.html"><code>title</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidtitle" target="_blank">/session/:sessionId/title</a></code></p>
    

    <p>Get the current page title.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="url"><a href="http://nightwatchjs.org/api/url.html"><code>url</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidurl" target="_blank">/session/:sessionId/url</a></code></p>
    

    <p>Retrieve the URL of the current page or navigate to a new URL.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>url</code><br><span class="optional">Optional</span></td>
           <td>string|function</td>
           <td>If missing, it will return the URL of the current page as an argument to the supplied callback</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>Function</td>
           <td></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="window"><a href="http://nightwatchjs.org/api/window.html"><code>window</code></a> <span class="since optional">since v0.3.0</span></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidwindow" target="_blank">/session/:sessionId/window</a></code></p>
    

    <p>Change focus to another window or close the current window.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>method</code></td>
           <td>string</td>
           <td>The HTTP method to use</td>
         </tr>
         
         <tr>
           <td><code>handleOrName</code></td>
           <td>string</td>
           <td>The window to change focus to.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="windowHandle"><a href="http://nightwatchjs.org/api/windowHandle.html"><code>windowHandle</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidwindow_handle" target="_blank">/session/:sessionId/window_handle</a></code></p>
    

    <p>Retrieve the current window handle.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="windowHandles"><a href="http://nightwatchjs.org/api/windowHandles.html"><code>windowHandles</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidwindow_handles" target="_blank">/session/:sessionId/window_handles</a></code></p>
    

    <p>Retrieve the list of all window handles available to the session.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="windowMaximize"><a href="http://nightwatchjs.org/api/windowMaximize.html"><code>windowMaximize</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidwindowwindowhandlemaximize" target="_blank">/session/:sessionId/window/:windowHandle/maximize</a></code></p>
    

    <p>Retrieve the current window handle.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>handleOrName</code><br><span class="optional">Optional</span></td>
           <td>string</td>
           <td>windowHandle URL parameter; if it is "current", the currently active window will be maximized.</td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="windowPosition"><a href="http://nightwatchjs.org/api/windowPosition.html"><code>windowPosition</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidwindowwindowhandleposition" target="_blank">/session/:sessionId/window/:windowHandle/position</a></code></p>
    

    <p>Change or get the position of the specified window. If the second argument is a function it will be used as a callback and the call will perform a get request to retrieve the existing window position.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>windowHandle</code></td>
           <td>string</td>
           <td></td>
         </tr>
         
         <tr>
           <td><code>offsetX</code></td>
           <td>number</td>
           <td></td>
         </tr>
         
         <tr>
           <td><code>offsetY</code></td>
           <td>number</td>
           <td></td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  <div class="apimethod">
    <h3 id="windowSize"><a href="http://nightwatchjs.org/api/windowSize.html"><code>windowSize</code></a></h3>
    
    <p>See <code><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidwindowwindowhandlesize" target="_blank">/session/:sessionId/window/:windowHandle/size</a></code></p>
    

    <p>Change or get the size of the specified window. If the second argument is a function it will be used as a callback and the call will perform a get request to retrieve the existing window size.</p>

    <h5>Arguments:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>windowHandle</code></td>
           <td>string</td>
           <td></td>
         </tr>
         
         <tr>
           <td><code>width</code></td>
           <td>number</td>
           <td></td>
         </tr>
         
         <tr>
           <td><code>height</code></td>
           <td>number</td>
           <td></td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td>Optional callback function to be called when the command finishes.</td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
  </div>
  
  </div>
  <!-- ============================================================
    // END Protocol commands
    ============================================================ -->

  </div>

</div>
</div>
  </div>


  </section>


  <section id="contact-container" data-page-uri="/contact" class="secondary">
    <div class="jumbotron">
      <div class="container">
        <h1>Contact</h1>
      </div>
    </div>

    <div class="container bs-docs-container">
      <h2>Issues</h2>
      <p>Please report any issues or feature requests at <a href="https://github.com/nightwatchjs/nightwatch/issues" target="_blank">github.com/nightwatchjs/nightwatch/issues</a></p>

      <h2>Questions/Getting Help</h2>
      <p>You're encouraged to ask any questions you might have regarding the usage of Nightwatch or its API on the <a href="https://groups.google.com/forum/#!members/nightwatchjs" target="_blank">Mailing List</a> or on <a href="https://twitter.com/nightwatchjs" target="_blank">Twitter</a>.
      In addition, there is a <a href="http://stackoverflow.com/questions/tagged/nightwatch.js">StackOverflow Nightwatch.js tag</a> at your disposal.</p>

      <h2>Contributing</h2>
      <p>Any contribution would be most welcome, so feel free to <a href="https://github.com/nightwatchjs/nightwatch" target="_blank">fork</a> and send me your pull requests.</p>
    </div>
  </section>

    <footer>
      <div class="container">
        <p class="align-left">© Nightwatchjs.org 2015 </p>
        <div class="align-right">

          <iframe id="twitter-widget-0" scrolling="no" frameborder="0" allowtransparency="true" class="twitter-follow-button twitter-follow-button-rendered" title="Twitter Follow Button" src="./Nightwatch.js - API Reference_files/follow_button.b41e99df00581dc95d7fdd63f3283511.en.html" data-screen-name="nightwatchjs" style="position: static; visibility: visible; width: 233px; height: 20px;"></iframe></div>
      </div>
    </footer>

    <script src="./Nightwatch.js - API Reference_files/jquery.js"></script>
    <script src="./Nightwatch.js - API Reference_files/bootstrap.min.js"></script>
    <script src="./Nightwatch.js - API Reference_files/prismjs.js"></script>

    <script src="./Nightwatch.js - API Reference_files/underscore-min.js"></script>
    <script src="./Nightwatch.js - API Reference_files/swig.min.js"></script>
    <script src="./Nightwatch.js - API Reference_files/dominomvc-0.1.0.min.js"></script>

    <script src="./Nightwatch.js - API Reference_files/views.js"></script>
    <script src="./Nightwatch.js - API Reference_files/api.js"></script>
    <script src="./Nightwatch.js - API Reference_files/app.js"></script>
    <!-- MEDIA buttons code -->
    <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="https://platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>
    <script>
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
      ga('create', 'UA-47244459-1', 'nightwatchjs.org');
      ga('send', 'pageview');
    </script>
  

<iframe id="rufous-sandbox" scrolling="no" frameborder="0" allowtransparency="true" allowfullscreen="true" style="position: absolute; visibility: hidden; display: none; width: 0px; height: 0px; padding: 0px; border: none;" src="./Nightwatch.js - API Reference_files/saved_resource.html"></iframe></body></html>